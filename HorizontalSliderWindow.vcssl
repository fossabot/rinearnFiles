coding UTF-8;

# PRAGMA COMPILE    REFERRAL
# PRAGMA RESERVE    ALL
# PRAGMA END

import "./HorizontalSliderPanel.vcssl";

import GUI;


/**
 * <p>
 * このライブラリ gui.HorizontalSliderWindow は、
 * GUI部品として、水平スライダーが並ぶウィンドウ ―― スライダーウィンドウ ―― を提供します。	
 * </p>
 *
 * <p>
 * VCSSLの標準ライブラリ「 GUI 」では、GUI部品をint型のIDで扱いますが、
 * このモジュールで提供されるGUI部品は、
 * <a href="#HorizontalSliderWindow">HorizontalSliderWindow</a> 構造体として扱います。
 * </p>
 *
 * <p>
 * HorizontalSliderWindow 構造体は、内部にリソースのID等を保持していますが、
 * <br />
 * 生成・破棄のための関数が提供されるため、その中身を特に意識する必要はありません（ むしろメンバへの直接的なアクセスは推奨されません ）。
 * <br />
 * 具体的には、 <a href="#newHorizontalSliderWindow">newHorizontalSliderWindow</a> 関数で生成し、 
 * <a href="#deleteComponent">deleteComponent</a> 関数で破棄します。
 * </p>
 *
 * <p>
 * またこのモジュールでは、
 * HorizontalSliderWindow 構造体を標準ライブラリ「 GUI 」と同様の感覚でそのまま扱えるように、
 * 標準GUIライブラリ関数のオーバーロードも提供されます。
 * <br />
 * 例えば、 
 * <a href="#mountComponent">mountComponent</a> 関数や、
 * <a href="#setComponentSize">setComponentSize</a> 関数、 
 * <a href="#setComponentLocation">setComponentLocation</a> 関数などが提供されます。
 * </p>
 * 
 * @author  松井文宏 - Fumihiro Matsui ( RINEARN )
 * @license Public domain ( CC0 )
 */


/** デフォルトのウィンドウタイトルです。 */
private const string DEFAULT_WINDOW_TITLE = "HorizontalSliderWindow";

/** デフォルトのウィンドウオフセット値です。ウィンドウ外周と内部の高さのおおまかな差を指定します。 */
private const int DEFAULT_WINDOW_WIDTH_OFFSET = 16;

/** デフォルトのウィンドウオフセット値です。ウィンドウ外周と内部の高さのおおまかな差を指定します。 */
private const int DEFAULT_WINDOW_HEIGHT_OFFSET = 38;

/** デフォルトのウィンドウ位置(X)です。 */
private const int DEFAULT_WINDOW_X = 0;

/** デフォルトのウィンドウ位置(Y)です。 */
private const int DEFAULT_WINDOW_Y = 0;

/** デフォルトのウィンドウ幅です。 */
private const int DEFAULT_WINDOW_WIDTH = 300;

/** デフォルトのウィンドウ高さです。 */
private const int DEFAULT_GRID_HEIGHT = 25;

/** デフォルトのボタン高さです。 */
private const int DEFAULT_BUTTON_HEIGHT = 30;

/** デフォルトのボタン間余白です。 */
private const int DEFAULT_BUTTON_MARGIN_TOP = 5;

/** デフォルトのウィンドウ内余白領域です(左)。 */
private const int DEFAULT_WINDOW_MARGIN_LEFT = 10;

/** デフォルトのウィンドウ内余白領域です(右)。 */
private const int DEFAULT_WINDOW_MARGIN_RIGHT = 10;

/** デフォルトのウィンドウ内余白領域です(上)。 */
private const int DEFAULT_WINDOW_MARGIN_TOP = 10;

/** デフォルトのウィンドウ内余白領域です(下)。 */
private const int DEFAULT_WINDOW_MARGIN_BOTTOM = 10;


/** スライダーウィンドウの構造体です。 */
public struct HorizontalSliderWindow{
	// ウィンドウのGUI部品IDです。
	protected int window = NULL;
	// ボタンのGUI部品IDです。
	protected int button = NULL;
	// スライダーパネルです。
	protected HorizontalSliderPanel horizontalSliderPanel = NULL;
}


/**
 * スライダーウィンドウを生成します。
 *
 * @param x ウィンドウ左上頂点のX座標
 * @param y ウィンドウ左上頂点のY座標
 * @param width ウィンドウの幅
 * @param height ウィンドウの高さ
 * @param title ウィンドウのタイトル
 * @param labelText 全スライダーのラベル文字列を格納する配列
 * @param defaultValue 全スライダーのデフォルト値を格納する配列
 * @param minValue 全スライダーの最小値を格納する配列
 * @param maxValue 全スライダーの最大値を格納する配列
 * @return 生成したテキストフィールドウィンドウ
 */
public HorizontalSliderWindow newHorizontalSliderWindow(int x, int y, int width, int height, string title, string labelText[], float defaultValue[], float minValue[], float maxValue[]){
	HorizontalSliderWindow windowInstance;

	windowInstance.horizontalSliderPanel = newHorizontalSliderPanel(
		DEFAULT_WINDOW_MARGIN_LEFT,
		DEFAULT_WINDOW_MARGIN_TOP,
		width - DEFAULT_WINDOW_MARGIN_LEFT - DEFAULT_WINDOW_MARGIN_RIGHT - DEFAULT_WINDOW_WIDTH_OFFSET,
		height - DEFAULT_WINDOW_MARGIN_TOP - DEFAULT_WINDOW_MARGIN_BOTTOM - DEFAULT_WINDOW_HEIGHT_OFFSET,
		labelText,
		defaultValue,
		minValue,
		maxValue
	);

	windowInstance.window = newWindow(x, y, width, height, title);
	mountComponent(windowInstance.horizontalSliderPanel, windowInstance.window);
	paintComponent(windowInstance.horizontalSliderPanel);
	paintComponent(windowInstance.window);

	return windowInstance;
}


/**
 * 自動でウィンドウサイズを決定し、スライダーウィンドウを生成します。
 *
 * @param labelText 全スライダーのラベル文字列を格納する配列
 * @param defaultValue 全スライダーのデフォルト値を格納する配列
 * @param minValue 全スライダーの最小値を格納する配列
 * @param maxValue 全スライダーの最大値を格納する配列
 * @return 生成したテキストフィールドウィンドウ
 */
public HorizontalSliderWindow newHorizontalSliderWindow(string labelText[], float defaultValue[], float minValue[], float maxValue[]){
	int n = length(labelText, 0);
	int windowHeight = DEFAULT_GRID_HEIGHT*n + DEFAULT_WINDOW_MARGIN_TOP + DEFAULT_WINDOW_MARGIN_BOTTOM + DEFAULT_WINDOW_HEIGHT_OFFSET;
	HorizontalSliderWindow windowInstance = newHorizontalSliderWindow(
		DEFAULT_WINDOW_X,
		DEFAULT_WINDOW_Y,
		DEFAULT_WINDOW_WIDTH,
		windowHeight,
		DEFAULT_WINDOW_TITLE,
		labelText,
		defaultValue,
		minValue,
		maxValue
	);
	return windowInstance;
}


/**
 * スライダーウィンドウを生成します。
 *
 * @param x ウィンドウ左上頂点のX座標
 * @param y ウィンドウ左上頂点のY座標
 * @param width ウィンドウの幅
 * @param height ウィンドウの高さ
 * @param title ウィンドウのタイトル
 * @param labelText 全スライダーのラベル文字列を格納する配列
 * @param defaultValue 全スライダーのデフォルト値を格納する配列
 * @param minValue 全スライダーの最小値を格納する配列
 * @param maxValue 全スライダーの最大値を格納する配列
 * @return 生成したテキストフィールドウィンドウ
 */
public HorizontalSliderWindow newHorizontalSliderWindow(int x, int y, int width, int height, string title, string labelText[], int defaultValue[], int minValue[], int maxValue[]){
	HorizontalSliderWindow windowInstance;

	windowInstance.horizontalSliderPanel = newHorizontalSliderPanel(
		DEFAULT_WINDOW_MARGIN_LEFT,
		DEFAULT_WINDOW_MARGIN_TOP,
		width - DEFAULT_WINDOW_MARGIN_LEFT - DEFAULT_WINDOW_MARGIN_RIGHT - DEFAULT_WINDOW_WIDTH_OFFSET,
		height - DEFAULT_WINDOW_MARGIN_TOP - DEFAULT_WINDOW_MARGIN_BOTTOM - DEFAULT_WINDOW_HEIGHT_OFFSET,
		labelText,
		defaultValue,
		minValue,
		maxValue
	);

	windowInstance.window = newWindow(x, y, width, height, title);
	mountComponent(windowInstance.horizontalSliderPanel, windowInstance.window);
	paintComponent(windowInstance.horizontalSliderPanel);
	paintComponent(windowInstance.window);

	return windowInstance;
}


/**
 * 自動でウィンドウサイズを決定し、スライダーウィンドウを生成します。
 *
 * @param labelText 全スライダーのラベル文字列を格納する配列
 * @param defaultValue 全スライダーのデフォルト値を格納する配列
 * @param minValue 全スライダーの最小値を格納する配列
 * @param maxValue 全スライダーの最大値を格納する配列
 * @return 生成したテキストフィールドウィンドウ
 */
public HorizontalSliderWindow newHorizontalSliderWindow(string labelText[], int defaultValue[], int minValue[], int maxValue[]){
	int n = length(labelText, 0);
	int windowHeight = DEFAULT_GRID_HEIGHT*n + DEFAULT_WINDOW_MARGIN_TOP + DEFAULT_WINDOW_MARGIN_BOTTOM + DEFAULT_WINDOW_HEIGHT_OFFSET;
	HorizontalSliderWindow windowInstance = newHorizontalSliderWindow(
		DEFAULT_WINDOW_X,
		DEFAULT_WINDOW_Y,
		DEFAULT_WINDOW_WIDTH,
		windowHeight,
		DEFAULT_WINDOW_TITLE,
		labelText,
		defaultValue,
		minValue,
		maxValue
	);
	return windowInstance;
}


/**
 * スライダーウィンドウを破棄します。
 *
 * @param windowInstance 破棄するウィンドウ
 */
public void deleteComponent(HorizontalSliderWindow &windowInstance){
	demountComponent(windowInstance.horizontalSliderPanel, windowInstance.window);
	deleteComponent(windowInstance.horizontalSliderPanel);
	deleteComponent(windowInstance.window);
	windowInstance = NULL;
}


/**
 * ラベル部分の幅を設定します。
 *
 * @param windowInstance 取得対象のスライダーウィンドウ
 * @param labelWidth ラベル幅
 */
public void setTextLabelWidth(HorizontalSliderWindow &windowInstance, int labelWidth){
	setTextLabelWidth(windowInstance.horizontalSliderPanel, labelWidth);
}


/**
 * ウィンドウ下部に、決定ボタンを出現させます。
 *
 * @param windowInstance 対象のウィンドウ
 * @param 決定ボタンのラベル文字列
 */
public void setButton(HorizontalSliderWindow &windowInstance, string label){
	if(windowInstance.button == NULL){
		int windowSize[] = getComponentSize(windowInstance.window);
		int panelSize[] = getComponentSize(windowInstance.horizontalSliderPanel);
		int panelLocation[] = getComponentLocation(windowInstance.horizontalSliderPanel);
		int buttonX = panelLocation[0];
		int buttonY = panelLocation[1] + panelSize[1] + DEFAULT_BUTTON_MARGIN_TOP;
		int buttonWidth = panelSize[0];
		int buttonHeight = DEFAULT_BUTTON_HEIGHT;
		windowInstance.button = newButton(
			buttonX, buttonY, buttonWidth, buttonHeight, label
		);
		mountComponent(windowInstance.button, windowInstance.window);
		setComponentSize(windowInstance.window, windowSize[0], windowSize[1] + buttonHeight + DEFAULT_BUTTON_MARGIN_TOP);
	}else{
		setComponentText(windowInstance.button, label);
	}
}


/**
 * 決定ボタンのGUIコンポーネントIDを取得します。
 *
 * @param windowInstance 対象のウィンドウ
 * @return 決定ボタンのGUIコンポーネントID
 */
public int getButton(HorizontalSliderWindow &windowInstance){
	return windowInstance.button;
}


/**
 * ウィンドウのGUIコンポーネントIDを取得します。
 *
 * @param windowInstance 対象のウィンドウ
 * @return ウィンドウのGUIコンポーネントID
 */
public int getWindow(HorizontalSliderWindow &windowInstance){
	return windowInstance.window;
}


/**
 * 指定されたラベルに対応するスライダーを取得します。
 *
 * @param windowInstance 対象のウィンドウ
 * @param labelText 取得対象のスライダーに対応するラベル文字列
 * @return スライダーのGUIコンポーネントID
 */
public int getHorizontalSlider(HorizontalSliderWindow &windowInstance, string labelText){
	return getHorizontalSlider(windowInstance.horizontalSliderPanel, labelText);
}


/**
 * 指定されたインデックスのスライダーを取得します。
 *
 * @param windowInstance 対象のウィンドウ
 * @param index スライダーのインデックス
 * @return スライダーのGUIコンポーネントID
 */
public int getHorizontalSlider(HorizontalSliderWindow &windowInstance, int index){
	return getHorizontalSlider(windowInstance.horizontalSliderPanel, index);
}


/*
 * スライダーパネルを取得します。
 *
 * @param windowInstance 対象のウィンドウ
 * @return スライダーパネル構造体
 */
/*
public HorizontalSliderPanel getHorizontalSliderPanel(HorizontalSliderWindow &windowInstance){
	return windowInstance.horizontalSliderPanel;
}
*/


/*
 * 指定されたインデックスのスライダーに、float値を設定します。
 *
 * @param windowInstance 対象のウィンドウ
 * @param index スライダーのインデックス
 * @param value 設定するbool値
 */
/*
public void setComponentFloat(HorizontalSliderWindow &windowInstance, int index, float value){
	setComponentFloat(windowInstance.horizontalSliderPanel, index, value);
}
*/


/*
 * 指定されたインデックスのスライダーから、float値を取得します。
 *
 * @param windowInstance 対象のウィンドウ
 * @param index スライダーのインデックス
 * @return スライダーの保持するfloat値
 */
/*
public float getComponentFloat(HorizontalSliderWindow &windowInstance, int index){
	return getComponentFloat(windowInstance.horizontalSliderPanel, index);
}
*/


/*
 * 指定されたラベルに対応するスライダーに、float値を設定します。
 *
 * @param windowInstance 対象のウィンドウ
 * @param labelText 設定対象のスライダーに対応するラベル文字列
 * @param value 設定するfloat値
 */
/*
public void setComponentFloat(HorizontalSliderWindow &windowInstance, string labelText, float value){
	setComponentFloat(windowInstance.horizontalSliderPanel, labelText, value);
}
*/


/*
 * 指定されたラベルに対応するスライダーから、float値を取得します。
 *
 * @param windowInstance 対象のウィンドウ
 * @param labelText 取得対象のスライダーに対応するラベル文字列
 * @return テキストフィールドの保持するflaot値
 */
/*
public float getComponentFloat(HorizontalSliderWindow &windowInstance, string labelText){
	return getComponentFloat(windowInstance.horizontalSliderPanel, labelText);
}
*/


/**
 * ウィンドウのサイズを返します。
 *
 * @param windowInstance 対象のウィンドウ
 * @return ウィンドウのサイズを格納する配列
 */
public int[] getComponentSize(HorizontalSliderWindow &windowInstance){
	return getComponentSize(windowInstance.window);
}


/**
 * ウィンドウのサイズを設定します。
 *
 * @param windowInstance 対象のウィンドウ
 * @param width 幅
 * @param width 高さ
 * @return ウィンドウのサイズを格納する配列
 */
public void setComponentSize(HorizontalSliderWindow &windowInstance, int width, int height){
	setComponentSize(windowInstance.window, width, height);
	setComponentSize(windowInstance);
}


/**
 * ウィンドウの現在のサイズに合わせて、内部コンポーネントのサイズを自動設定します。ウィンドウのサイズを外部から変更した際に使用します。
 *
 * @param windowInstance 対象のウィンドウ
 */
public void setComponentSize(HorizontalSliderWindow &windowInstance){
	int windowSize[] = getComponentSize(windowInstance.window);

	int panelWidth = windowSize[0]
		 - DEFAULT_WINDOW_WIDTH_OFFSET - DEFAULT_WINDOW_MARGIN_RIGHT - DEFAULT_WINDOW_MARGIN_LEFT;

	int panelHeight = windowSize[1]
		 - DEFAULT_WINDOW_HEIGHT_OFFSET - DEFAULT_WINDOW_MARGIN_TOP - DEFAULT_WINDOW_MARGIN_BOTTOM;

	if(windowInstance.button != NULL){
		panelHeight -= DEFAULT_BUTTON_HEIGHT + DEFAULT_BUTTON_MARGIN_TOP;

		int buttonWidth = panelWidth;
		setComponentSize(windowInstance.button, buttonWidth, DEFAULT_BUTTON_HEIGHT);

		int buttonHeight = panelHeight + DEFAULT_WINDOW_MARGIN_TOP + DEFAULT_BUTTON_MARGIN_TOP;
		setComponentLocation(windowInstance.button, DEFAULT_WINDOW_MARGIN_LEFT, buttonHeight);
	}

	setComponentSize(windowInstance.horizontalSliderPanel, panelWidth, panelHeight);
}


/**
 * ウィンドウの位置を返します。
 *
 * @param windowInstance 対象のウィンドウ
 * @return ウィンドウの位置を格納する配列
 */
public int[] getComponentLocation(HorizontalSliderWindow &windowInstance){
	return getComponentLocation(windowInstance.window);
}


/**
 * ウィンドウの位置を設定します。
 *
 * @param windowInstance 設定対象のウィンドウ
 * @param x ウィンドウ左上頂点のX座標
 * @param y ウィンドウ左上頂点のY座標
 */
public void setComponentLocation(HorizontalSliderWindow &windowInstance, int x, int y){
	setComponentLocation(windowInstance.window, x, y);
}


/**
 * ウィンドウの位置を設定します。
 *
 * @param windowInstance 対象のウィンドウ
 * @param x ウィンドウのX座標
 * @param y ウィンドウのY座標
 */
public void setComponentLocation(HorizontalSliderWindow &windowInstance, int x, int y){
	setComponentLocation(windowInstance.window, x, y);
}


/**
 * ウィンドウを再描画します。
 *
 * @param windowInstance 対象のウィンドウ
 */
public void paintComponent(HorizontalSliderWindow &windowInstance){
	paintComponent(windowInstance.horizontalSliderPanel);
	if(windowInstance.button != NULL){
		paintComponent(windowInstance.button);
	}
	paintComponent(windowInstance.window);
}


/**
 * ウィンドウを不可視化します。
 *
 * @param windowInstance 対象のウィンドウ
 */
public void hideComponent(HorizontalSliderWindow &windowInstance){
	hideComponent(windowInstance.window);
}


/**
 * ウィンドウを可視化します。
 *
 * @param windowInstance 対象のウィンドウ
 */
public void showComponent(HorizontalSliderWindow &windowInstance){
	showComponent(windowInstance.window);
}


