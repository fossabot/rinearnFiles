coding UTF-8;


/**
 * プロセスが生成された際にコールされます。
 * 
 * @param processID イベント発生元のプロセスID
 */
void onProcessStart(int processID) {
}

/**
 * プロセスが終了した際にコールされます。
 * 
 * @param processID イベント発生元のプロセスID
 */
void onProcessEnd(int processID) {
}

/**
 * プロセスが標準出力を行った際にコールされます。
 * ただし出力内容はバッファされるため、実際に出力が行われた瞬間にコールされるわけではなく、タイムラグが存在します。
 * バッファがフラッシュされるタイミングは、厳密には処理系依存ですが、恐らく通常は行単位です。
 * その場合、このイベントハンドラにも、出力内容が行単位で渡されます
 * （ただし、処理系のバッファ容量を超過するような長い行では、1行の内容が区切られ、複数回に渡ってコールされる可能性もあります）。
 * なお、改行を待たずに、任意のタイミングでバッファを強制的にフラッシュさせるには、<a href="#flushProcessOutput">flushProcessOutput</a> 関数を使用してください。
 * 
 * @param processID イベント発生元のプロセスID
 * @param processID 標準出力内容
 */
void onProcessOutput(int processID, string output) {
}

/**
 * プロセスが標準エラー出力を行った際にコールされます。
 * ただし出力内容はバッファされるため、実際に出力が行われた瞬間にコールされるわけではなく、タイムラグが存在します。
 * バッファがフラッシュされるタイミングは、厳密には処理系依存ですが、恐らく通常は行単位です。
 * その場合、このイベントハンドラにも、出力内容が行単位で渡されます
 * （ただし、処理系のバッファ容量を超過するような長い行では、1行の内容が区切られ、複数回に渡ってコールされる可能性もあります）。
 * なお、改行を待たずに、任意のタイミングでバッファを強制的にフラッシュさせるには、<a href="#flushProcessError">flushProcessError</a> 関数を使用してください。
 * 
 * @param processID イベント発生元のプロセスID
 * @param processID 標準エラー出力内容
 */
void onProcessOutput(int processID, string output) {
}



