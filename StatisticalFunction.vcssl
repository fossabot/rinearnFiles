coding UTF-8;

# PRAGMA COMPILE    REFERRAL
# PRAGMA RESERVE    ALL
# PRAGMA END

import Math;

/**
 * <p>
 * このライブラリ math.StatisticalFunction は、
 * 平均や標準偏差などの統計関数を提供します。
 * </p>
 *
 * <p>
 * なお、このモジュールでは varfloat 型など、
 * 多倍長精度のものも提供されますが、
 * <br />
 * ただアルゴリズムが実装されているだけであり、
 * 演算誤差の蓄積や、桁落ち等に対する特別な措置は行われません。
 * </p>
 *
 * <p>
 * つまり、最終桁まで正しい値が得られる訳ではなく、
 * 演算結果の末尾に、常に誤差蓄積による正しくない部分が含まれます。
 * <br />
 * この誤差部分の長さは、実装のアルゴリズムの違いや、
 * 引数による桁落ちやその他影響の違いなど、場合によって異なります。
 * </p>
 *
 * <p>
 * 従って、 varfloat 型などの多倍長精度の関数を使用する場合は、
 * <br />
 * 必要な桁数よりも、十分に大きな桁数で関数を呼び出し、
 * 得られた結果から不要な（誤差を含む）部分を切り捨てて下さい。
 * </p>
 * 
 * @author  松井文宏 - Fumihiro Matsui ( RINEARN )
 * @license Public domain ( CC0 )
 */


/**
 * 和を計算します。
 *
 * @param args 計算のもとになる値です。可変長引数なので、配列による一括指定のほかに、複数の引数として指定する事もできます。
 * @return 計算結果です。
 */
float sum( ... float args[] ){
	int n = length( args, 0 );
	float value = 0.0;
	for( int i=0; i<n; i++ ){
		value += args[i];
	}
	return value;
}


/**
 * 和を計算します。
 *
 * @param args 計算のもとになる値です。可変長引数なので、配列による一括指定のほかに、複数の引数として指定する事もできます。
 * @return 計算結果です。
 */
varfloat sum( ... varfloat args[] ){
	int n = length( args, (int)0v );
	varfloat value = 0.0vf;
	for( int i=0; i<n; i++ ){
		value += args[i];
	}
	return value;
}


/**
 * 平均値を計算します。
 *
 * @param args 計算のもとになる値です。可変長引数なので、配列による一括指定のほかに、複数の引数として指定する事もできます。
 * @return 計算結果です。
 */
float mean( ... float args[] ){
	int n = length( args, 0 );
	float value = sum( args ) / n;
	return value;
}


/**
 * 平均値を計算します。
 *
 * @param args 計算のもとになる値です。可変長引数なので、配列による一括指定のほかに、複数の引数として指定する事もできます。
 * @return 計算結果です。
 */
varfloat mean( ... varfloat args[] ){
	int n = length( args, (int)0v );
	varfloat value = sum( args ) / n;
	return value;
}


/**
 * 分散（分母は n ）を計算します。
 *
 * @param args 計算のもとになる値です。可変長引数なので、配列による一括指定のほかに、複数の引数として指定する事もできます。
 * @return 計算結果です。
 */
float van( ... float args[] ){
	int n = length( args, 0 );
	float mean = mean( args );
	float value = 0.0;
	for( int i=0; i<n; i++ ){
		value += (mean-args[i])*(mean-args[i]);
	}
	value /= n;
	return value;
}


/**
 * 分散（分母は n ）を計算します。
 *
 * @param args 計算のもとになる値です。可変長引数なので、配列による一括指定のほかに、複数の引数として指定する事もできます。
 * @return 計算結果です。
 */
varfloat van( ... varfloat args[] ){
	int n = length( args, (int)0v );
	varfloat mean = mean( args );
	varfloat value = 0.0vf;
	for( int i=0; i<n; i++ ){
		value += (mean-args[i])*(mean-args[i]);
	}
	value /= n;
	return value;
}


/**
 * 不偏分散（分母は n-1 ）を計算します。
 *
 * @param args 計算のもとになる値です。可変長引数なので、配列による一括指定のほかに、複数の引数として指定する事もできます。
 * @return 計算結果です。
 */
float van1( ... float args[] ){
	int n = length( args, 0 );
	float mean = mean( args );
	float value = 0.0;
	for( int i=0; i<n; i++ ){
		value += (mean-args[i])*(mean-args[i]);
	}
	value /= n-1;
	return value;
}


/**
 * 不偏分散（分母は n-1 ）を計算します。
 *
 * @param args 計算のもとになる値です。可変長引数なので、配列による一括指定のほかに、複数の引数として指定する事もできます。
 * @return 計算結果です。
 */
varfloat van1( ... varfloat args[] ){
	int n = length( args, (int)0v );
	varfloat mean = mean( args );
	varfloat value = 0.0vf;
	for( int i=0; i<n; i++ ){
		value += (mean-args[i])*(mean-args[i]);
	}
	value /= n - 1v;
	return value;
}



/**
 * 標準偏差（分母は n ）を計算します。
 *
 * @param args 計算のもとになる値です。可変長引数なので、配列による一括指定のほかに、複数の引数として指定する事もできます。
 * @return 計算結果です。
 */
float sdn( ... float args[] ){
	float value = sqrt( van(args) );
	return value;
}


/**
 * 標準偏差（分母は n ）を計算します。
 *
 * @param args 計算のもとになる値です。可変長引数なので、配列による一括指定のほかに、複数の引数として指定する事もできます。
 * @return 計算結果です。
 */
varfloat sdn( ... varfloat args[] ){
	varfloat value = sqrt( van(args) );
	return value;
}


/**
 * 不偏標準偏差（分母は n-1 ）を計算します。
 *
 * @param args 計算のもとになる値です。可変長引数なので、配列による一括指定のほかに、複数の引数として指定する事もできます。
 * @return 計算結果です。
 */
float sdn1( ... float args[] ){
	float value = sqrt( van1(args) );
	return value;
}


/**
 * 不偏標準偏差（分母は n-1 ）を計算します。
 *
 * @param args 計算のもとになる値です。可変長引数なので、配列による一括指定のほかに、複数の引数として指定する事もできます。
 * @return 計算結果です。
 */
varfloat sdn1( ... varfloat args[] ){
	varfloat value = sqrt( van1(args) );
	return value;
}



