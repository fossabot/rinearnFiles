coding UTF-8;

# PRAGMA COMPILE    REFERRAL
# PRAGMA RESERVE    ALL
# PRAGMA END

import GUI;

/**
 * <p>
 * このライブラリ gui.CheckBoxPanel は、
 * GUI部品として、チェックボックスが並ぶパネル ―― チェックボックスパネル ―― を提供します。	
 * </p>
 *
 * <p>
 * VCSSLの標準ライブラリ「 GUI 」では、GUI部品をint型のIDで扱いますが、
 * このモジュールで提供されるGUI部品は、
 * <a href="#CheckBoxPanel">CheckBoxPanel</a> 構造体として扱います。
 * </p>
 *
 * <p>
 * CheckBoxPanel 構造体は、内部にリソースのID等を保持していますが、
 * <br />
 * 生成・破棄のための関数が提供されるため、その中身を特に意識する必要はありません（ むしろメンバへの直接的なアクセスは推奨されません ）。
 * <br />
 * 具体的には、 <a href="#newCheckBoxPanel">newCheckBoxPanel</a> 関数で生成し、 
 * <a href="#deleteComponent">deleteComponent</a> 関数で破棄します。
 * </p>
 *
 * <p>
 * またこのモジュールでは、
 * CheckBoxPanel 構造体を標準ライブラリ「 GUI 」とほぼ同様の感覚でそのまま扱えるように、
 * 標準GUIライブラリ関数のオーバーロードも提供されます。
 * <br />
 * 例えば、 
 * <a href="#mountComponent">mountComponent</a> 関数や、
 * <a href="#setComponentSize">setComponentSize</a> 関数、 
 * <a href="#setComponentLocation">setComponentLocation</a> 関数などが提供されます。
 * </p>
 * 
 * @author  松井文宏 - Fumihiro Matsui ( RINEARN )
 * @license Public domain ( CC0 )
 */


/** デフォルトのパネルタイトルです。 */
private const string DEFAULT_PANEL_TITLE = "CheckBoxPanel";

/** 指定されたラベルが見つからなかった場合のエラーメッセージです。 */
private const string ERROR_LABEL_NOT_FOUND = "このラベルは存在しません：";


/**
 * チェックボックスパネルの構造体です。
 */
public struct CheckBoxPanel{
	// パネルのGUI部品IDです。
	protected int panel = NULL;
	// パネルのGUI部品IDです。
	protected int checkBoxGridPanel = NULL;
	// チェックボックスのGUI部品IDです。
	protected int checkBox[0];
	// チェックボックスのラベル文字列を保持します。
	protected string textLabelString[0];
}


/**
 * チェックボックスパネルを生成します。
 *
 * @param x パネルのX座標
 * @param y パネルのY座標
 * @param width パネルの幅
 * @param height パネルの高さ
 * @param labelText ラベル文字列を格納する配列
 * @param defaultText チェックボックスの初期値文字列を格納する配列
 * @return 生成したチェックボックスパネル構造体
 */
public CheckBoxPanel newCheckBoxPanel(int x, int y, int width, int height, string labelText[], bool defaultValue[]){

	int n = length(labelText, 0);
	CheckBoxPanel panelInstance;

	panelInstance.panel = newPanel(
		x, y, width, height, DEFAULT_PANEL_TITLE
	);

	panelInstance.textLabelString = labelText;

	panelInstance.checkBoxGridPanel = newGridPanel(
		0, 0, width, height, "",	//x,y,幅,高さ,タイトル
		n, 1	//行数,列数
	);

	alloc[n] panelInstance.checkBox;

	for(int i=0; i<n; i++){
		panelInstance.checkBox[i] = newCheckBox(0, 0, 0, 0, labelText[i], defaultValue[i]);
		mountComponent(panelInstance.checkBox[i], panelInstance.checkBoxGridPanel);
	}

	mountComponent(panelInstance.checkBoxGridPanel, panelInstance.panel);

	return panelInstance;
}


/**
 * チェックボックスパネルを破棄します。
 *
 * @param panelInstance 破棄するチェックボックスパネル
 */
public void deleteComponent(CheckBoxPanel &panelInstance){
	int n = length(panelInstance.checkBox, 0);
	for(int i=0; i<n; i++){
		demountComponent(panelInstance.checkBox[i], panelInstance.checkBoxGridPanel);
		deleteComponent(panelInstance.checkBox[i]);
	}
	demountComponent(panelInstance.checkBoxGridPanel, panelInstance.panel);
	deleteComponent(panelInstance.checkBoxGridPanel);
	deleteComponent(panelInstance.panel);
	panelInstance = NULL;
}


/**
 * チェックボックスパネルを再描画します。
 *
 * @param panelInstance 再描画するチェックボックスパネル
 */
public void paintComponent(CheckBoxPanel &panelInstance){
	int n = length(panelInstance.checkBox, 0);
	for(int i=0; i<n; i++){
		paintComponent(panelInstance.checkBox[i]);
	}
	paintComponent(panelInstance.checkBoxGridPanel);
	paintComponent(panelInstance.panel);
}


/**
 * チェックボックスパネルを、別のGUIコンポーネント上に配置します。
 *
 * @param panelInstance 配置するチェックボックスパネル
 * @param componentID 配置先GUIコンポーネントID
 */
public void mountComponent(CheckBoxPanel &panelInstance, int componentID){
	mountComponent(panelInstance.panel, componentID);
}


/**
 * チェックボックスパネルを、別のGUIコンポーネントから配置解除します。
 *
 * @param panelInstance 配置解除するチェックボックスパネル
 * @param componentID 配置先GUIコンポーネントID
 */
public void demountComponent(CheckBoxPanel &panelInstance, int componentID){
	demountComponent(panelInstance.panel, componentID);
}


/**
 * パネルのコンポーネントIDを返します。
 *
 * @param panelInstance 取得対象のチェックボックスパネル
 * @return パネルのGUIコンポーネントID
 */
public int getPanel(CheckBoxPanel &panelInstance){
	return panelInstance.panel;
}


/**
 * 指定されたラベルに対応するチェックボックスを取得します。
 *
 * @param panelInstance 対象のチェックボックスパネル
 * @param labelText 取得対象のチェックボックスに対応するラベル文字列
 * @return チェックボックスのGUIコンポーネントID
 */
public int getCheckBox(CheckBoxPanel &panelInstance, string labelText){
	int index = labelIndexOf(panelInstance, labelText);
	if(index < 0){
		error(ERROR_LABEL_NOT_FOUND + labelText);
	}
	return panelInstance.checkBox[index];
}


/**
 * 指定されたインデックスのチェックボックスを取得します。
 *
 * @param panelInstance 対象のチェックボックスパネル
 * @param index チェックボックスのインデックス
 * @return チェックボックスのGUIコンポーネントID
 */
public int getCheckBox(CheckBoxPanel &panelInstance, int index){
	return panelInstance.checkBox[index];
}


/*
 * 指定されたインデックスのチェックボックスに、bool値を設定します。
 *
 * @param panelInstance 対象のチェックボックスパネル
 * @param index チェックボックスのインデックス
 * @param value 設定するbool値
 */
/*
public void setComponentBool(CheckBoxPanel &panelInstance, int index, bool value){
	setComponentBool(panelInstance.checkBox[index], value);
}
*/


/*
 * 指定されたインデックスのチェックボックスから、bool値を取得します。
 *
 * @param panelInstance 対象のチェックボックスパネル
 * @param index チェックボックスのインデックス
 * @return テキストフィールドの保持するbool値
 */
/*
public bool getComponentBool(CheckBoxPanel &panelInstance, int index){
	return getComponentBool(panelInstance.checkBox[index]);
}
*/


/*
 * 指定されたラベルに対応するチェックボックスに、bool値を設定します。
 *
 * @param panelInstance 対象のチェックボックスパネル
 * @param labelText 設定対象のテキストフィールドに対応するラベル文字列
 * @param value 設定するbool値
 */
/*
public void setComponentBool(CheckBoxPanel &panelInstance, string labelText, bool value){
	int index = labelIndexOf(panelInstance, labelText);
	if(index < 0){
		error(ERROR_LABEL_NOT_FOUND + labelText);
	}
	setComponentBool(panelInstance.checkBox[index], value);
}
*/


/*
 * 指定されたラベルに対応するチェックボックスから、bool値を取得します。
 *
 * @param panelInstance 対象のチェックボックスパネル
 * @param labelText 取得対象のチェックボックスに対応するラベル文字列
 * @return テキストフィールドの保持するbool値
 */
/*
public bool getComponentBool(CheckBoxPanel &panelInstance, string labelText){
	int index = labelIndexOf(panelInstance, labelText);
	if(index < 0){
		error(ERROR_LABEL_NOT_FOUND + labelText);
	}
	return getComponentBool(panelInstance.checkBox[index]);
}
*/


/**
 * ラベル文字列に対応する、チェックボックスのインデックスを返します。
 *
 * @param panelInstance 対象のチェックボックスパネル
 * @param labelText 検索するラベル文字列
 */
private int labelIndexOf(CheckBoxPanel &panelInstance, string labelText){
	int n = length(panelInstance.textLabelString, 0);
	for(int i=0; i<n; i++){
		if(panelInstance.textLabelString[i] == labelText){
			return i;
		}
	}
	return -1;
}


/**
 * パネルのサイズを返します。
 *
 * @param panelInstance 対象のチェックボックスパネル
 * @return パネルのサイズを格納する配列
 */
public int[] getComponentSize(CheckBoxPanel &panelInstance){
	return getComponentSize(panelInstance.panel);
}


/**
 * パネルのサイズを設定します。
 *
 * @param panelInstance 対象のチェックボックスパネル
 * @param width パネルの幅
 * @param height パネルの高さ
 */
public void setComponentSize(CheckBoxPanel &panelInstance, int width, int height){
	setComponentSize(panelInstance.panel, width, height);
	setComponentSize(panelInstance);
}


/**
 * パネルの現在のサイズに合わせて、内部コンポーネントのサイズを自動設定します。パネルのサイズを外部から変更した際に使用します。
 *
 * @param panelInstance 対象のチェックボックスパネル
 */
public void setComponentSize(CheckBoxPanel &panelInstance){
	int panelSize[] = getComponentSize(panelInstance.panel);
	setComponentSize(panelInstance.checkBoxGridPanel, panelSize[0], panelSize[1]);
}


/**
 * パネルの位置を返します。
 *
 * @param panelInstance 対象のチェックボックスパネル
 * @return パネルの位置を格納する配列
 */
public int[] getComponentLocation(CheckBoxPanel &panelInstance){
	return getComponentLocation(panelInstance.panel);
}


/**
 * パネルの位置を設定します。
 *
 * @param panelInstance 対象のチェックボックスパネル
 * @param x ウィンドウのX座標
 * @param y ウィンドウのY座標
 */
public void setComponentLocation(CheckBoxPanel &panelInstance, int x, int y){
	setComponentLocation(panelInstance.panel, x, y);
}


