coding UTF-8;

# PRAGMA COMPILE    REFERRAL
# PRAGMA RESERVE    ALL
# PRAGMA END

/**
 * <p>
 * このライブラリ data.DataWrapper は、
 * 任意型の変数値を構造体でラッピングする機能を提供します。
 * 主に配列データをラッピングするのに使用します。
 * </p>
 *
 * <p>
 * VCSSLではジャグ配列が禁止されているため、
 * 配列の要素数は、各次元内では一様である必要があります。
 * <br />
 * 例えば、要素数の異なる1次元の配列データをまとめて、
 * 2次元配列にする事はできません。
 * </p>
 *
 * <p>
 * そこで配列データを構造体でラッピングする事により、
 * この制約を回避する事ができます。
 * <br />
 * 上の例では、1次元配列データをラッピングした構造体を作り、
 * その構造体の配列を作る事で、
 * 2次元のジャグ配列のような構造を実現できます。
 * </p>
 *
 * <p>
 * このモジュールでは、そのようなラッピング用途のために、
 * ジェネリック構造体 <a href="#DataWrapper">DataWrapper</a>
 * が提供されます。
 * <br />
 * wrap関数で、任意型変数のデータをラッピングし、
 * DataWrapper 構造体に変換する事ができます。
 * また、unwrap関数で、元のデータを取り出す事もできます。
 * </p>
 * 
 * <p>
 * なお、DataWrapperは、実際に
 * data.<a href="WrappedList.html">WrappedList</a>,
 * <a href="WrappedStack.html">WrappedStack</a>,
 * <a href="WrappedQueue.html">WrappedQueue</a>
 * の実装に使用されています。
 * <br />
 * これらのライブラリでは、DataWrapperによって、
 * 要素数の異なる配列に対応したコレクション機能を実現しています。
 * </p>
 * 
 * @author  松井文宏 - Fumihiro Matsui ( RINEARN )
 * @license Public domain ( CC0 )
 */


/**
 * 任意型のデータをラッピングする構造体です。
 */
public struct DataWrapper<Type>{
	protected Type data;
}


/**
 * 任意型のデータをラッピングします。
 *
 * @param arg ラッピングするデータ
 * @return 入力値のラッパー
 */
public DataWrapper<Type> wrap<Type>(Type arg){
	DataWrapper<Type> wrapper;
	wrapper.data = arg;
	return wrapper;
}


/**
 * ラッピングしているデータを取り出します。
 *
 * @param wrapper データを取り出すラッパー
 * @return ラッパーが保持している値
 */
public Type unwrap<Type>(DataWrapper<Type> wrapper){
	Type v = wrapper.data;
	return v;
}


