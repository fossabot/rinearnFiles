coding UTF-8;

# PRAGMA COMPILE    REFERRAL
# PRAGMA RESERVE    ALL
# PRAGMA END

/**
 * <p>
 * このライブラリ math.FourierTransform は、
 * 離散フーリエ変換(DFT)の処理を提供します。
 * </p>
 *
 * <p>
 * 現時点で高速フーリエ変換(FFT)は実装されておらず、
 * 計算オーダーが N^2 の単純なDFTのみが実装されています。
 * </p>
 *
 * <p>
 * なお、このモジュールでは varcomplex 型による
 * 多倍長精度の離散フーリエ変換処理も提供されますが、
 * <br />
 * ただアルゴリズムが実装されているだけであり、
 * 演算誤差の蓄積や、桁落ち等に対する特別な措置は行われません。
 * </p>
 *
 * <p>
 * つまり、最終桁まで正しい値が得られる訳ではなく、
 * 演算結果の末尾に、常に誤差蓄積による正しくない部分が含まれます。
 * <br />
 * この誤差部分の長さは、実装のアルゴリズムの違いや、
 * 引数による桁落ちやその他影響の違いなど、場合によって異なります。
 * </p>
 *
 * <p>
 * 従って、多倍長精度のDFT(varcomplex型)を使用する場合は、
 * <br />
 * 必要な桁数よりも、十分に大きな桁数で関数を呼び出し、
 * 得られた結果から不要な（誤差を含む）部分を切り捨てて下さい。
 * </p>
 * 
 * @author  松井文宏 - Fumihiro Matsui ( RINEARN )
 * @license Public domain ( CC0 )
 */


import Math;
import System;
import math.ElementaryFunction;


/** 順変換となるフーリエ変換の指数部符号です。 */
public const int FORWARD = -1;

/** 逆変換となるフーリエ変換の指数部符号です。 */
public const int BACKWARD = 1;



/**
 * 離散フーリエ変換を行います。
 * 定義域は 0～2π で、変換後の規格化は行いません。
 *
 * @param arg 離散フーリエ変換したいデータを入力します。
 * @param sgn フーリエ変換の指数部符号です。-1で順変換、1で逆変換となります。通常は定数 FourierTransform.FORWARD （順変換）または FourierTransform.BACKWARD (逆変換) を用いて指定します。
 * @return 引数を離散フーリエ変換した値です。
 */
public complex[] dft(complex arg[], int sgn){

	int n = length(arg, 0);
	complex coeff = sgn * 2.0 * PI * I / n;
	complex value[n];

	for(int j=0; j<n; j++){

		complex sum = 0.0 + 0.0 * I;

		for(int k=0; k<n; k++){
			sum += arg[k] * exp(coeff * j * k);
		}

		value[j] = sum;
	}
	return value;
}


/**
 * 離散フーリエ変換を行います。
 * 定義域は 0～2π で、変換後の規格化は行いません。
 *
 * @param arg 離散フーリエ変換したいデータを入力します。
 * @param sgn フーリエ変換の指数部符号です。-1で順変換、1で逆変換となります。通常は定数 FourierTransform.FORWARD （順変換）または FourierTransform.BACKWARD (逆変換) を用いて指定します。
 * @return 引数を離散フーリエ変換した値です。
 */
public varcomplex[] dft(varcomplex arg[], int sgn){

	varfloat varpi = pi();

	varint n = length(arg, 0v);
	varcomplex coeff = sgn * 2.0vf * varpi * VCI / n;
	varcomplex value[n];

	for(varint j=0v; j<n; j++){

		varcomplex sum = 0.0vf + 0.0vf * VCI;

		for(varint k=0v; k<n; k++){
			sum += arg[k] * exp(coeff * j * k);
		}

		value[j] = sum;
	}
	return value;
}

