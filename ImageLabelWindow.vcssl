coding UTF-8;

# PRAGMA COMPILE    REFERRAL
# PRAGMA RESERVE    ALL
# PRAGMA END

import GUI;
import Graphics;

/**
 * <p>
 * このライブラリ gui.ImageLabelWindow は、
 * GUI部品として、画像ラベルを表示するウィンドウ ―― 画像ラベルウィンドウ ―― を提供します。	
 * <br />
 * 即席の描画ウィンドウや、画像ファイルの内容を表示するウィンドウなどとして使用できます。
 * </p>
 *
 * <p>
 * VCSSLの標準ライブラリ「 GUI 」では、GUI部品をint型のIDで扱いますが、
 * このモジュールで提供されるGUI部品は、
 * <a href="#ImageLabelWindow">ImageLabelWindow</a> 構造体として扱います。
 * </p>
 *
 * <p>
 * ImageLabelWindow 構造体は、内部にリソースのID等を保持していますが、
 * <br />
 * 生成・破棄のための関数が提供されるため、その中身を特に意識する必要はありません（ むしろメンバへの直接的なアクセスは推奨されません ）。
 * <br />
 * 具体的には、 <a href="#newImageLabelWindow">newImageLabelWindow</a> 関数で生成し、 
 * <a href="#deleteComponent">deleteComponent</a> 関数で破棄します。
 * </p>
 *
 * <p>
 * またこのモジュールでは、
 * ImageLabelWindow 構造体を標準ライブラリ「 GUI 」と同様の感覚でそのまま扱えるように、
 * 標準GUIライブラリ関数のオーバーロードも提供されます。
 * <br />
 * 例えば、 
 * <a href="#mountComponent">mountComponent</a> 関数や、
 * <a href="#setComponentSize">setComponentSize</a> 関数、 
 * <a href="#setComponentLocation">setComponentLocation</a> 関数などが提供されます。
 * </p>
 * 
 * @author  松井文宏 - Fumihiro Matsui ( RINEARN )
 * @license Public domain ( CC0 )
 */


/** デフォルトのウィンドウタイトルです。 */
private const string DEFAULT_WINDOW_TITLE = "ImageLabelWindow";

/** デフォルトのウィンドウオフセット値です。ウィンドウ外周と内部の高さのおおまかな差を指定します。 */
private const int DEFAULT_WINDOW_WIDTH_OFFSET = 16;

/** デフォルトのウィンドウオフセット値です。ウィンドウ外周と内部の高さのおおまかな差を指定します。 */
private const int DEFAULT_WINDOW_HEIGHT_OFFSET = 38;

/** デフォルトのウィンドウ位置(X)です。 */
private const int DEFAULT_WINDOW_X = 0;

/** デフォルトのウィンドウ位置(Y)です。 */
private const int DEFAULT_WINDOW_Y = 0;

/** デフォルトのウィンドウ内余白領域です(左)。 */
private const int DEFAULT_WINDOW_MARGIN_LEFT = 10;

/** デフォルトのウィンドウ内余白領域です(右)。 */
private const int DEFAULT_WINDOW_MARGIN_RIGHT = 10;

/** デフォルトのウィンドウ内余白領域です(上)。 */
private const int DEFAULT_WINDOW_MARGIN_TOP = 10;

/** デフォルトのウィンドウ内余白領域です(下)。 */
private const int DEFAULT_WINDOW_MARGIN_BOTTOM = 10;


/** 画像ラベルウィンドウの構造体です。 */
public struct ImageLabelWindow{
	// ウィンドウのGUI部品IDです。
	protected int window = NULL;
	// 画像ラベルのGUI部品IDです。
	protected int imageLabel = NULL;
}


/**
 * 画像ラベルウィンドウを生成します。
 *
 * @param x ウィンドウ左上頂点のX座標
 * @param y ウィンドウ左上頂点のY座標
 * @param width ウィンドウの幅
 * @param height ウィンドウの高さ
 * @param title ウィンドウのタイトル
 * @param graphics グラフィックスリソース
 * @return 生成したウィンドウ構造体
 */
public ImageLabelWindow newImageLabelWindow(int x, int y, int width, int height, string title, int graphics){
	ImageLabelWindow windowInstance;
	int graphicsWidth = getGraphicsWidth(graphics);
	int graphicsHeight = getGraphicsHeight(graphics);
	int labelX = (width - DEFAULT_WINDOW_WIDTH_OFFSET - graphicsWidth) / 2;
	int labelY = (height - DEFAULT_WINDOW_HEIGHT_OFFSET - graphicsHeight) / 2;
	windowInstance.imageLabel = newImageLabel(labelX, labelY, graphicsWidth, graphicsHeight, graphics);
	windowInstance.window = newWindow(x, y, width, height, title);
	mountComponent(windowInstance.imageLabel, windowInstance.window);
	return windowInstance;
}


/**
 * 自動でウィンドウサイズを決定し、画像ラベルウィンドウを生成します。
 *
 * @param graphics グラフィックスリソース
 * @return 生成したウィンドウ構造体
 */
public ImageLabelWindow newImageLabelWindow(int graphics){
	int graphicsWidth = getGraphicsWidth(graphics);
	int graphicsHeight = getGraphicsHeight(graphics);

	int windowWidth = graphicsWidth
		 + DEFAULT_WINDOW_WIDTH_OFFSET + DEFAULT_WINDOW_MARGIN_LEFT + DEFAULT_WINDOW_MARGIN_RIGHT;

	int windowHeight = graphicsHeight
		 + DEFAULT_WINDOW_HEIGHT_OFFSET + DEFAULT_WINDOW_MARGIN_TOP + DEFAULT_WINDOW_MARGIN_BOTTOM;

	ImageLabelWindow windowInstance;

	windowInstance.imageLabel = newImageLabel(
		DEFAULT_WINDOW_MARGIN_LEFT,
		DEFAULT_WINDOW_MARGIN_TOP,
		graphicsWidth,
		graphicsHeight,
		graphics
	);

	windowInstance.window = newWindow(
		DEFAULT_WINDOW_X,
		DEFAULT_WINDOW_Y,
		windowWidth,
		windowHeight,
		DEFAULT_WINDOW_TITLE
	);

	mountComponent(windowInstance.imageLabel, windowInstance.window);

	return windowInstance;
}


/**
 * 画像ラベルウィンドウを破棄します。
 *
 * @param windowInstance 破棄するウィンドウ
 */
public void deleteComponent(ImageLabelWindow &windowInstance){
	deleteComponent(windowInstance.window);
	deleteComponent(windowInstance.imageLabel);
	windowInstance = NULL;
}


/**
 * ウィンドウのGUIコンポーネントIDを返します。
 *
 * @param windowInstance 取得対象のウィンドウ
 * @return ウィンドウのGUIコンポーネントID
 */
public int getWindow(ImageLabelWindow &windowInstance){
	return windowInstance.window;
}


/**
 * 画像ラベルのGUIコンポーネントIDを返します。
 *
 * @param windowInstance 取得対象のウィンドウ
 * @return 画像ラベルのGUIコンポーネントID
 */
public int getImageLabel(ImageLabelWindow &windowInstance){
	return windowInstance.imageLabel;
}


/*
 * ウィンドウに表示するグラフィックスリソースを設定します。
 *
 * @param windowInstance 設定対象のウィンドウ
 * @param graphics 表示するグラフィックスリソース
 */
/*
public void setComponentGraphics(ImageLabelWindow &windowInstance, int graphics){
	setComponentGraphics(windowInstance.imageLabel, graphics);
	int gWidth = getGraphicsWidth(graphics);
	int gHeight = getGraphicsHeight(graphics);
	setComponentSize(windowInstance);
}
*/


/**
 * ウィンドウサイズを設定します。
 *
 * @param windowInstance 設定対象のウィンドウ
 * @param width ウィンドウの幅
 * @param height ウィンドウの高さ
 */
public void setComponentSize(ImageLabelWindow &windowInstance, int width, int height){
	setComponentSize(windowInstance.window, width, height);
	setComponentSize(windowInstance);
}


/**
 * ウィンドウの現在のサイズに合わせて、内部コンポーネントのレイアウトを自動設定します。ウインドウのサイズを外部から変更した際に使用します。
 *
 * @param windowInstance 対象のウィンドウ
 */
public void setComponentSize(ImageLabelWindow &windowInstance){

	int windowSize[] = getComponentSize(windowInstance.window);
	int innerWidth = windowSize[0] - DEFAULT_WINDOW_WIDTH_OFFSET;
	int innerHeight = windowSize[1] - DEFAULT_WINDOW_HEIGHT_OFFSET;

	int graphics = getComponentGraphics(windowInstance.imageLabel);
	int labelWidth = getGraphicsWidth(graphics);
	int labelHeight = getGraphicsHeight(graphics);

	int labelX = (innerWidth - labelWidth) / 2;
	int labelY = (innerHeight - labelHeight) / 2;

	setComponentSize(windowInstance.imageLabel, labelWidth, labelHeight);
	setComponentLocation(windowInstance.imageLabel, labelX, labelY);
}


/**
 * ウィンドウのサイズを返します。
 *
 * @param windowInstance 対象のウィンドウ
 * @return ウィンドウのサイズを格納する配列
 */
public int[] getComponentSize(ImageLabelWindow &windowInstance){
	return getComponentSize(windowInstance.window);
}


/**
 * グラフィックスリソースにちょうど適切なウィンドウサイズを設定します。
 *
 * @param windowInstance 設定対象のウィンドウ
 */
public void fitComponentSize(ImageLabelWindow &windowInstance){
	int graphics = getComponentGraphics(windowInstance.imageLabel);
	int graphicsWidth = getGraphicsWidth(graphics);
	int graphicsHeight = getGraphicsHeight(graphics);

	int windowWidth = graphicsWidth
		 + DEFAULT_WINDOW_WIDTH_OFFSET + DEFAULT_WINDOW_MARGIN_LEFT + DEFAULT_WINDOW_MARGIN_RIGHT;

	int windowHeight = graphicsHeight
		 + DEFAULT_WINDOW_HEIGHT_OFFSET + DEFAULT_WINDOW_MARGIN_TOP + DEFAULT_WINDOW_MARGIN_BOTTOM;

	setComponentSize(windowInstance, windowWidth, windowHeight);
}


/**
 * ウィンドウの位置を設定します。
 *
 * @param windowInstance 設定対象のウィンドウ
 * @param x ウィンドウ左上頂点のX座標
 * @param y ウィンドウ左上頂点のY座標
 */
public void setComponentLocation(ImageLabelWindow &windowInstance, int x, int y){
	setComponentLocation(windowInstance.window, x, y);
}


/**
 * ウィンドウの位置を返します。
 *
 * @param windowInstance 対象のウィンドウ
 * @return ウィンドウの位置を格納する配列
 */
public int[] getComponentLocation(ImageLabelWindow &windowInstance){
	return getComponentLocation(windowInstance.window);
}


/**
 * ウィンドウを再描画します。
 *
 * @param windowInstance 対象のウィンドウ
 */
public void paintComponent(ImageLabelWindow &windowInstance){
	paintComponent(windowInstance.imageLabel);
	paintComponent(windowInstance.window);
}


/**
 * ウィンドウを不可視化します。
 *
 * @param windowInstance 対象のウィンドウ
 */
public void hideComponent(ImageLabelWindow &windowInstance){
	hideComponent(windowInstance.window);
}


/**
 * ウィンドウを可視化します。
 *
 * @param windowInstance 対象のウィンドウ
 */
public void showComponent(ImageLabelWindow &windowInstance){
	showComponent(windowInstance.window);
}


