coding UTF-8;

# PRAGMA COMPILE    REFERRAL
# PRAGMA RESERVE    ALL
# PRAGMA END

/**
 * <p>
 * このライブラリ data.Queue は、
 * キュー型のデータ構造を提供します。	
 * </p>
 *
 * <p>
 * このモジュールでは、キューのデータを保持する
 * ジェネリック構造体 <a href="#Queue">Queue</a> と、
 * それに対してデータを出し入れするジェネリック関数 
 * <a href="#enqueue">enqueue</a>, <a href="#dequeue">dequeue</a> 
 * などが提供されます。 
 * </p>
 *
 * <p>
 * なお、この data.Queue では、
 * 配列を要素として扱う事はできません。配列を要素にしたい場合は、
 * data.<a href="WrappedQueue.html">WrappedQueue</a> 
 * を使用して下さい。
 * </p>
 * 
 * @author  松井文宏 - Fumihiro Matsui ( RINEARN )
 * @license Public domain ( CC0 )
 */


/**
 * キュー構造体です。キューのデータを保持します。
 */
public struct Queue<Type>{
	protected int first = 0;
	protected int last = 0;
	protected int size = 0;
	protected Type data[1];
}


/**
 * 要素を全て削除します。
 *
 * @param queue 対象のキュー構造体
 */
public void clear<Type>( Queue<Type> &queue ){
	alloc[0] queue.data;
	alloc[1] queue.data;
	queue.first = 0;
	queue.last = 0;
	queue.size = 0;
}


/**
 * 使用中のサイズを返します。
 *
 * @param queue 対象のキュー構造体
 */
public int size<Type>( Queue<Type> &queue ){
	return queue.size;
}


/**
 * キューに要素を追加します。
 *
 * @param queue 対象のキュー構造体
 * @param value 追加する要素
 */
public void enqueue<Type>( Queue<Type> &queue, Type value ){
	queue.size++;
	queue.data[ queue.last++ ] = value;
	setProperLength<Type>(queue);
	queue.last %= length(queue.data, 0);
}


/**
 * キューから要素を取り出します。取り出した要素は、キューから削除されます。
 *
 * @param queue 対象のキュー構造体
 * @return 取り出した要素
 */
public Type dequeue<Type>( Queue<Type> &queue ){
	queue.size--;
	checksize(queue.size);
	Type value = queue.data[ queue.first++ ];
	queue.first %= length(queue.data, 0);
	setProperLength<Type>(queue);
	return value;
}


/**
 * キューから要素を削除せずに取り出します。
 *
 * @param queue 対象のキュー構造体
 * @return 取り出した要素
 */
public Type peek<Type>( Queue<Type> &queue ){
	return queue.data[ queue.first ];
}


/**
 * キューが指定された要素を含んでいるか判定します。
 *
 * @param queue 対象のキュー構造体
 * @param 含まれるか判定したい要素
 */
public bool contains<Type>( Queue<Type> &queue, Type element ){
	int n = queue.size;
	for(int i=0; i<n; i++){
		if(queue.data[i] == element){
			return true;
		}
	}
	return false;
}


/**
 * キューが保持する全要素の順序を反転させます。
 *
 * @param queue 対象のキュー構造体
 */
public void reverse<Type>( Queue<Type> &queue ){

	// queue.dataはリングバッファなので、内容をシフトして先頭をインデックス 0 に移動
	shiftData<Type>( queue );

	int n = queue.size;
	Type data[] = queue.data;
	Type rev[n];
	for(int i=0; i<n; i++){
		rev[i] = data[n-1-i];
	}
	queue.data = rev;
}



/**
 * キューが保持する全要素を、1次元の配列に変換して返します。
 *
 * @param queue 対象のキュー構造体
 * @return スタックの全要素をまとめた1次元配列
 */
public Type[] toArray<Type>( Queue<Type> &queue ){

	// queue.dataはリングバッファなので、内容をシフトして先頭をインデックス 0 に移動
	shiftData<Type>( queue );

	// バッファの余剰領域を削除して返す
	Type array[] = queue.data;
	alloc[ queue.size ] array;
	return array;
}


/**
 * キューバッファを、必要に応じて最適な容量に再確保します。
 *
 * @param queue 対象のキュー構造体
 */
private int setProperLength<Type>( Queue<Type> &queue ){

	//<varint>や<varfloat>の場合、式中でintやfloatのリテラルを使うと精度警告が出るので、変数化して回避
	int zero = 0;

	//現在のバッファ長と、適切なバッファ長を取得
	int currentLength = length(queue.data, zero);
	int currentUsage = getUsage(queue.first, queue.last, currentLength);
	int properLength = getProperLength(currentLength, currentUsage);

	//現在のバッファサイズが適切でない場合は容量変更
	if(currentLength != properLength){

		//リングバッファをシフトして先頭をインデックス 0 に移動
		shiftData<Type>( queue );

		//バッファ容量変更
		alloc[properLength] queue.data;
	}

}


/**
 * キューのサイズが適正かどうかを確認し、不正ならエラーを出力します。
 *
 * @param size キューのサイズ
 */
private int checksize(int size){
	if(size < 0){
		error("キューの容量が負になりました。");
	}
}


/**
 * キューバッファ（リングバッファ）をシフトし、
 * 先頭をインデックス 0 に合わせます。
 *
 * @param queue 対象のキュー構造体
 */
private void shiftData<Type>( Queue<Type> &queue ){
	int zero = 0;
	int currentLength = length(queue.data, zero);

	Type shiftedData[] = queue.data;
	int f = queue.first;
	for(int i=0; i<currentLength; i++){
		shiftedData[i] = queue.data[ (i+f) % currentLength ];
	}
	queue.data = shiftedData;

	// 位置情報を変更して再登録
	if(queue.last < queue.first){
		queue.last += currentLength;
	}
	queue.last -= queue.first;
	queue.first = 0;
}


/**
 * 現在のキューバッファ長と、その中の使用量から、最適なキューバッファ長を返します。
 *
 * @param length 現在のキューバッファ長
 * @param usage 現在のキューバッファ使用量
 */
private int getProperLength(int length, int usage){
	if( length == 0 ){
		return 1;
	}else if( length <= usage+1 ){
		return length * 2;
	}else if( usage < length/2 ){
		return length / 2;
	}else{
		return length;
	}
}


/**
 * キューのリングバッファ内で、実際に使用している長さを返します。
 *
 * @param first 先頭インデックス
 * @param last 終端インデックス
 * @param length バッファ長
 */
private int getUsage(int first, int last, int length){
	if(first <= last){
		return last - first;
	}else{
		return last - first + length;
	}
}

