coding UTF-8;

import "./Graphics3DFramework.vcssl";

import GUI;
import Graphics;
import Graphics3D;
import Graphics2D;

/**
 * graphics3d.Graphics3DFramework モジュールのテストです。
 */


/** テストで用いる球モデルのIDです。 */
int sphere = NULL;

/** 背景及び前景2D描画をテストするかどうかを選択します。 */
const bool TEST_2D_RENDERING = true;

/**
 * この関数はフレームワーク側から、
 * 起動後のタイミングで一度だけ実行されます。
 */
void onStart(int renderer){
	if(TEST_2D_RENDERING){
		testSetBackgroundRendererState();
		testSetForegroundRendererState();
	}
	testSetBackgroundColor();
	testGetBackgroundColor();
	testSetWindowSize();
	testGetWindowSize();
	testSetWindowLocation();
	testGetWindowLocation();
	testSetWindowTitle();
	testGetWindowTitle();
	testSetMagnification();
	testGetMagnification();
	testSetDirectionalLightVector();
	testGetDirectionalLightVector();
	testSetDirectionalLightBrightness();
	testGetDirectionalLightBrightness();
	testSetDirectionalLightBrightness();
	testGetDirectionalLightBrightness();
	testSetFrameRate();
	testSetMarginTop();
	testGetMarginTop();
	testSetMarginBottom();
	testGetMarginBottom();
	testSetMarginRight();
	testGetMarginRight();
	testSetMarginLeft();
	testGetMarginLeft();
	testGetWindow();

	// 座標軸モデルを配置
	int axis = newAxisModel(3.0, 3.0, 3.0);
	mountModel(axis, renderer);

	// 円錐モデル（ワイヤーフレーム）を配置
	int cone = newConeModel(1.4, 1.4, 2.0, 20, 14);
	moveModel(cone, 2.0, 0.0, -1.0);
	rotModelX(cone, 1.2);
	setModelFill(cone, false);
	mountModel(cone, renderer);

	// 球モデルを配置
	sphere = newSphereModel(1.4, 1.4, 1.4, 20, 14);
	setModelColor(sphere, 0, 255, 255, 255);
	moveModel(sphere, 1.0, 0.0, 0.0);
	mountModel(sphere, renderer);
}


/**
 * この関数はフレームワーク側から、
 * 画面更新タイミングの間で毎回実行されます。
 */
void onUpdate(int renderer){
	// モデルを回転
	rotModelZ(sphere, 0.02);
}


/**
 * この関数はフレームワーク側から、
 * 画面更新タイミングで毎回実行されます。
 */
void onPaint(int renderer){
	if(TEST_2D_RENDERING){
		// 背景2DCG描画テスト
		testGetBackgroundRenderer();
		testBackgroundRenderer();

		// 前景2DCG描画テスト
		testGetForegroundRenderer();
		testForegroundRenderer();

		testGetFrameRate();
		testGetCurrentFrameRate();
		testGetLastFrameTime();
	}
}


/**
 * この関数はフレームワーク側から、
 * 終了前のタイミングで一度だけ実行されます。
 */
void onExit(int renderer){
	alert("終了します");
}


/**
 * ボタンのイベントハンドラです。
 * ボタンがクリックされたタイミングで実行されます。
 */
public void onButtonClick(int id){
	testExport();
}


public void testExport(){
	string fileName = "Graphics3DFrameworkTest.jpg";
	export(fileName, "JPEG", 100.0);
	alert(fileName + " に出力しました。");
}


void testSetBackgroundColor(){
	setBackgroundColor(0, 0, 0, 255);
}

void testGetBackgroundColor(){
	int color[] = getBackgroundColor();
	assert(color[0] == 0);
	assert(color[1] == 0);
	assert(color[2] == 0);
	assert(color[3] == 255);
}


void testSetMagnification(){
	setMagnification(1400.0);
}

void testGetMagnification(){
	assert(getMagnification() == 1400.0);
}


void testSetBackgroundRendererState(){
	setBackgroundRendererState(true);
}


void testSetForegroundRendererState(){
	setForegroundRendererState(true);
}


void testGetBackgroundRenderer(){
	int bgRenderer = getBackgroundRenderer();
	assert(bgRenderer != NULL);
}


void testBackgroundRenderer(){
	int bgRenderer = getBackgroundRenderer();
	setDrawColor(bgRenderer, 0, 0, 255, 255);
	drawOval(bgRenderer, 0, 0, 500, 300, true);
}


void testGetForegroundRenderer(){
	int fgRenderer = getForegroundRenderer();
	assert(fgRenderer != NULL);
}


void testForegroundRenderer(){
	int fgRenderer = getForegroundRenderer();
	setDrawColor(fgRenderer, 0, 255, 0, 200);
	drawRect(fgRenderer, 300, 300, 500, 300, true);
}


void testSetWindowSize(){
	setWindowSize(1000, 800);
}


void testGetWindowSize(){
	int size[] = getWindowSize();
	assert(size[0] == 1000);
	assert(size[1] == 800);
}


void testSetWindowLocation(){
	setWindowLocation(200, 100);
}


void testGetWindowLocation(){
	int location[] = getWindowLocation();
	assert(location[0] == 200);
	assert(location[1] == 100);
}


void testSetWindowTitle(){
	setWindowTitle("Test");
}


void testGetWindowTitle(){
	assert(getWindowTitle() == "Test");
}


void testSetDirectionalLightVector(){
	setDirectionalLightVector(-1.0, 0.0, 2.0);
}


void testGetDirectionalLightVector(){
	float v[] = getDirectionalLightVector();
	assert(v[0] == -1.0);
	assert(v[1] == 0.0);
	assert(v[2] == 2.0);
}


void testSetDirectionalLightBrightness(){
	setDirectionalLightBrightness(0.4);
}


void testGetDirectionalLightBrightness(){
	assert(getDirectionalLightBrightness() == 0.4);
}


void testSetDirectionalLightBrightness(){
	setDirectionalLightBrightness(0.5);
}


void testGetDirectionalLightBrightness(){
	assert(getDirectionalLightBrightness() == 0.5);
}


void testSetFrameRate(){
	setFrameRate(24.0);
}


void testGetFrameRate(){
	assert(getFrameRate() == 24.0);
}


void testGetCurrentFrameRate(){
	float rate = getCurrentFrameRate();
	int bgRend = getBackgroundRenderer();
	setDrawFontSize(bgRend, 12);
	setDrawColor(bgRend, 255, 255, 255, 255);
	drawText(bgRend, 50, 50, 1000, 20, "Current Frame Rate = " + rate);
}


void testGetLastFrameTime(){
	int time = getLastFrameTime();
	int bgRend = getBackgroundRenderer();
	setDrawFontSize(bgRend, 12);
	setDrawColor(bgRend, 255, 255, 255, 255);
	drawText(bgRend, 50, 80, 1000, 20, "Last Frame Time = " + time);
}


void testSetMarginTop(){
	setMarginTop(20);
}

void testGetMarginTop(){
	assert(getMarginTop() == 20);
}


void testSetMarginBottom(){
	setMarginBottom(20);
}

void testGetMarginBottom(){
	assert(getMarginBottom() == 20);
}

void testSetMarginRight(){
	setMarginRight(20);
}

void testGetMarginRight(){
	assert(getMarginRight() == 20);
}

void testSetMarginLeft(){
	setMarginLeft(200);
}

void testGetMarginLeft(){
	assert(getMarginLeft() == 200);
}

void testGetWindow(){
	int window = getWindow();
	int button = newButton(10, 20, 180, 50, "EXPORT");
	mountComponent(button, window);
}



