coding UTF-8;

# PRAGMA COMPILE    REFERRAL
# PRAGMA RESERVE    ALL
# PRAGMA END

import Math;
import System;

/**
 * <p>
 * このライブラリ system.Complex は、complex型の補助機能を提供します。
 * </p>
 *
 * <p>
 * また、complex型やvarcomplex型がサポートされていない処理系において、
 * float[2]配列やvarfloat[2]配列で複素数演算を行うための機能も提供されます。
 * </p>
 * 
 * @author  松井文宏 - Fumihiro Matsui ( RINEARN )
 * @license Public domain ( CC0 )
 */


/** float[2]を複素数として扱う場合の実部インデックスを表します。 */
public const int RE = 0;

/** float[2]を複素数として扱う場合の虚部インデックスを表します。 */
public const int IM = 1;


/**
 * float[2] を complex に変換します。
 *
 * @param 変換する値
 * @return 変換した値
 */
public complex toComplex(float arg[]){
	return arg[RE] + arg[IM] * I;
}



/**
 * complex型の複数の値を、配列にまとめて返します。
 *
 * @param args 配列にまとめたい値（可変長引数）
 * @return 引数の値をまとめた配列
 */
public complex[] toComplexArray(... complex args[]){
	return args;
}


/**
 * varcomplex型の複数の値を、配列にまとめて返します。
 *
 * @param args 配列にまとめたい値（可変長引数）
 * @return 引数の値をまとめた配列
 */
public varcomplex[] toVarcomplexArray(... varcomplex args[]){
	return args;
}



/**
 * complex を float[2] に変換します。
 *
 * @param 変換する値
 * @return 変換した値
 */
public float[] toFloatArray(complex arg){
	float value[2];
	value[RE] = System.re(arg);
	value[IM] = System.im(arg);
	return value;
}


/**
 * varfloat[2] を varcomplex に変換します。
 *
 * @param 変換する値
 * @return 変換した値
 */
public varcomplex toVarcomplex(varfloat arg[]){
	return arg[RE] + arg[IM] * VCI;
}


/**
 * complex を float[2] に変換します。
 *
 * @param 変換する値
 * @return 変換した値
 */
public varfloat[] toVarfloatArray(varcomplex arg){
	varfloat value[2v];
	value[RE] = System.re(arg);
	value[IM] = System.im(arg);
	return value;
}


/**
 * 複素数の実部を返します。この関数は、System.re( complex ) 関数をそのままラッピングしています。
 *
 * @param 複素数の値
 * @param 実部の値
 */
public float creal(complex arg){
	return System.re(arg);
}


/**
 * 複素数の実部を返します。この関数は、System.re( varcomplex ) 関数をそのままラッピングしています。
 *
 * @param 複素数の値
 * @param 実部の値
 */
public varfloat creal(varcomplex arg){
	return System.re(arg);
}


/**
 * 複素数の実部を返します。
 *
 * @param 複素数の値
 * @param 実部の値
 */
public float creal(float arg[]){
	return arg[RE];
}


/**
 * 複素数の実部を返します。
 *
 * @param 複素数の値
 * @param 実部の値
 */
public varfloat creal(varfloat arg[]){
	return arg[RE];
}


/**
 * 複素数の虚部を返します。この関数は、System.im( complex ) 関数をそのままラッピングしています。
 *
 * @param 複素数の値
 * @param 虚部の値
 */
public float cimag(complex arg){
	return System.im(arg);
}


/**
 * 複素数の虚部を返します。この関数は、System.im( varcomplex ) 関数をそのままラッピングしています。
 *
 * @param 複素数の値
 * @param 虚部の値
 */
public varfloat cimag(varcomplex arg){
	return System.im(arg);
}


/**
 * 虚部を返します。
 *
 * @param 複素数の値
 * @param 虚部の値
 */
public float cimag(float arg[]){
	return arg[IM];
}


/**
 * 虚部を返します。
 *
 * @param 複素数の値
 * @param 虚部の値
 */
public varfloat cimag(varfloat arg[]){
	return arg[IM];
}


/**
 * float[2]/varfloat[2]を複素数と見なし、加算値を返します。
 *
 * @param operandA 演算する値(左側)
 * @param operandA 演算する値(右側)
 * @return 演算結果
 */
public float[] cadd(float a[], float b[]){
	float value[ 2 ];
	value[RE] = a[RE] + b[RE];
	value[IM] = a[IM] + b[IM];
	return value;
}


/**
 * float[2]/varfloat[2]を複素数と見なし、加算値を返します。
 *
 * @param operandA 演算する値(左側)
 * @param operandA 演算する値(右側)
 * @return 演算結果
 */
public varfloat[] cadd(varfloat a[], varfloat b[]){
	varfloat value[ 2v ];
	value[RE] = a[RE] + b[RE];
	value[IM] = a[IM] + b[IM];
	return value;
}


/**
 * float[2]/varfloat[2]を複素数と見なし減算値を返します。
 *
 * @param operandA 演算する値(左側)
 * @param operandA 演算する値(右側)
 * @return 演算結果
 */
public float[] csub(float a[], float b[]){
	float value[ 2 ];
	value[RE] = a[RE] - b[RE];
	value[IM] = a[IM] - b[IM];
	return value;
}


/**
 * float[2]/varfloat[2]を複素数と見なし減算値を返します。
 *
 * @param operandA 演算する値(左側)
 * @param operandA 演算する値(右側)
 * @return 演算結果
 */
public varfloat[] csub(varfloat a[], varfloat b[]){
	varfloat value[ 2v ];
	value[RE] = a[RE] - b[RE];
	value[IM] = a[IM] - b[IM];
	return value;
}


/**
 * float[2]/varfloat[2]を複素数と見なし、乗算値を返します。
 *
 * @param operandA 演算する値(左側)
 * @param operandA 演算する値(右側)
 * @return 演算結果
 */
public float[] cmul(float a[], float b[]){
	float value[ 2 ];
	value[RE] = a[RE] * b[RE] - a[IM] * b[IM];
	value[IM] = a[RE] * b[IM] + a[IM] * b[RE];
	return value;
}


/**
 * float[2]/varfloat[2]を複素数と見なし、乗算値を返します。
 *
 * @param operandA 演算する値(左側)
 * @param operandA 演算する値(右側)
 * @return 演算結果
 */
public varfloat[] cmul(varfloat a[], varfloat b[]){
	varfloat value[ 2v ];
	value[RE] = a[RE] * b[RE] - a[IM] * b[IM];
	value[IM] = a[RE] * b[IM] + a[IM] * b[RE];
	return value;
}


/**
 * float[2]/varfloat[2]を複素数と見なし、除算値を返します。
 *
 * @param operandA 演算する値(左側)
 * @param operandA 演算する値(右側)
 * @return 演算結果
 */
public float[] cdiv(float a[], float b[]){
	float value[ 2 ];
	float r = ( b[RE] * b[RE] + b[IM] * b[IM] );
	value[RE] = ( a[RE] * b[RE] + a[IM] * b[IM] ) / r;
	value[IM] = ( a[IM] * b[RE] - a[RE] * b[IM] ) / r;
	return value;
}


/**
 * float[2]/varfloat[2]を複素数と見なし、除算値を返します。
 *
 * @param operandA 演算する値(左側)
 * @param operandA 演算する値(右側)
 * @return 演算結果
 */
public varfloat[] cdiv(varfloat a[], varfloat b[]){
	varfloat value[ 2v ];
	varfloat r = ( b[RE] * b[RE] + b[IM] * b[IM] );
	value[RE] = ( a[RE] * b[RE] + a[IM] * b[IM] ) / r;
	value[IM] = ( a[IM] * b[RE] - a[RE] * b[IM] ) / r;
	return value;
}


