coding UTF-8;

# PRAGMA COMPILE    REFERRAL
# PRAGMA RESERVE    ALL
# PRAGMA END

import GUI;

/**
 * <p>
 * このライブラリ gui.TextFieldPanel は、
 * GUI部品として、テキストフィールドが並ぶパネル ―― テキストフィールドパネル ―― を提供します。	
 * </p>
 *
 * <p>
 * VCSSLの標準ライブラリ「 GUI 」では、GUI部品をint型のIDで扱いますが、
 * このモジュールで提供されるGUI部品は、
 * <a href="#TextFieldPanel">TextFieldPanel</a> 構造体として扱います。
 * </p>
 *
 * <p>
 * TextFieldPanel 構造体は、内部にリソースのID等を保持していますが、
 * <br />
 * 生成・破棄のための関数が提供されるため、その中身を特に意識する必要はありません（ むしろメンバへの直接的なアクセスは推奨されません ）。
 * <br />
 * 具体的には、 <a href="#newTextFieldPanel">newTextFieldPanel</a> 関数で生成し、 
 * <a href="#deleteComponent">deleteComponent</a> 関数で破棄します。
 * </p>
 *
 * <p>
 * またこのモジュールでは、
 * TextFieldPanel 構造体を標準ライブラリ「 GUI 」とほぼ同様の感覚でそのまま扱えるように、
 * 標準GUIライブラリ関数のオーバーロードも提供されます。
 * <br />
 * 例えば、 
 * <a href="#mountComponent">mountComponent</a> 関数や、
 * <a href="#setComponentSize">setComponentSize</a> 関数、 
 * <a href="#setComponentLocation">setComponentLocation</a> 関数などが提供されます。
 * </p>
 * 
 * @author  松井文宏 - Fumihiro Matsui ( RINEARN )
 * @license Public domain ( CC0 )
 */


/** デフォルトのパネルタイトルです。 */
private const string DEFAULT_PANEL_TITLE = "TextFieldPanel";

/** 指定されたラベルが見つからなかった場合のエラーメッセージです。 */
private const string ERROR_LABEL_NOT_FOUND = "このラベルは存在しません：";


/** テキストフィールドパネルの構造体です。 */
public struct TextFieldPanel{
	// パネルのGUI部品IDです。
	protected int panel = NULL;
	// テキストラベルが並ぶグリッドパネルのGUI部品IDです。
	protected int textLabelGridPanel = NULL;
	// テキストフィールドが並ぶグリッドパネルのGUI部品IDです。
	protected int textFieldGridPanel = NULL;
	// テキストラベルのGUI部品IDです。
	protected int textLabel[0];
	// テキストフィールドのGUI部品IDです。
	protected int textField[0];
	// テキストラベルの文字列を保持します。
	protected string textLabelString[0];
}


/**
 * テキストフィールドパネルを生成します。
 *
 * @param x パネルのX座標
 * @param y パネルのY座標
 * @param width パネルの幅
 * @param height パネルの高さ
 * @param labelText ラベル文字列を格納する配列
 * @param labelWidth ラベル部分の幅
 * @param defaultText テキストフィールドの初期値文字列を格納する配列
 * @return 生成したテキストフィールドパネル構造体
 */
public TextFieldPanel newTextFieldPanel(int x, int y, int width, int height, string labelText[], string defaultText[]){

	int n = length(labelText, 0);
	TextFieldPanel panelInstance;

	panelInstance.panel = newPanel(
		x, y, width, height, DEFAULT_PANEL_TITLE
	);

	panelInstance.textLabelString = labelText;

	int labelWidth = width / 2;

	panelInstance.textLabelGridPanel = newGridPanel(
		0, 0, labelWidth, height, "",	//x,y,幅,高さ,タイトル
		n, 1	//行数,列数
	);

	panelInstance.textFieldGridPanel = newGridPanel(
		labelWidth, 0, width-labelWidth, height, "",	//x,y,幅,高さ,タイトル
		n, 1	//行数,列数
	);

	alloc[n] panelInstance.textLabel;
	alloc[n] panelInstance.textField;

	for(int i=0; i<n; i++){
		panelInstance.textLabel[i] = newTextLabel(0, 0, 0, 0, labelText[i]);
		panelInstance.textField[i] = newTextField(0, 0, 0, 0, defaultText[i]);
		mountComponent(panelInstance.textLabel[i], panelInstance.textLabelGridPanel);
		mountComponent(panelInstance.textField[i], panelInstance.textFieldGridPanel);
	}

	mountComponent(panelInstance.textLabelGridPanel, panelInstance.panel);
	mountComponent(panelInstance.textFieldGridPanel, panelInstance.panel);

	return panelInstance;
}


/**
 * テキストフィールドパネルを破棄します。
 *
 * @param panelInstance 破棄するテキストフィールドパネル
 */
public void deleteComponent(TextFieldPanel &panelInstance){
	int n = length(panelInstance.textLabel, 0);
	for(int i=0; i<n; i++){
		demountComponent(panelInstance.textLabel[i], panelInstance.textLabelGridPanel);
		demountComponent(panelInstance.textField[i], panelInstance.textFieldGridPanel);
		deleteComponent(panelInstance.textLabel[i]);
		deleteComponent(panelInstance.textField[i]);
	}
	demountComponent(panelInstance.textLabelGridPanel, panelInstance.panel);
	demountComponent(panelInstance.textFieldGridPanel, panelInstance.panel);
	deleteComponent(panelInstance.textLabelGridPanel);
	deleteComponent(panelInstance.textFieldGridPanel);
	deleteComponent(panelInstance.panel);
	panelInstance = NULL;
}


/**
 * テキストフィールドパネルを再描画します。
 *
 * @param panelInstance 再描画するテキストフィールドパネル
 */
public void paintComponent(TextFieldPanel &panelInstance){
	int n = length(panelInstance.textLabel, 0);
	for(int i=0; i<n; i++){
		paintComponent(panelInstance.textLabel[i]);
		paintComponent(panelInstance.textField[i]);
	}
	paintComponent(panelInstance.textLabelGridPanel);
	paintComponent(panelInstance.textFieldGridPanel);
	paintComponent(panelInstance.panel);
}


/**
 * テキストフィールドパネルを、別のGUIコンポーネント上に配置します。
 *
 * @param panelInstance 配置するテキストフィールドパネル
 * @param componentID 配置先GUIコンポーネントID
 */
public void mountComponent(TextFieldPanel &panelInstance, int componentID){
	mountComponent(panelInstance.panel, componentID);
}


/**
 * テキストパネルを、別のGUIコンポーネントから配置解除します。
 *
 * @param panelInstance 配置解除するテキストフィールドパネル
 * @param componentID 配置先GUIコンポーネントID
 */
public void demountComponent(TextFieldPanel &panelInstance, int componentID){
	demountComponent(panelInstance.panel, componentID);
}


/**
 * （この関数は互換目的でサポートされています。getTextLabelWidth を使用して下さい。）
 * ラベル部分の幅を設定します。
 *
 * @param panelInstance 取得対象のテキストフィールドパネル
 * @param labelWidth ラベル部分の幅
 */
public void setLabelWidth(TextFieldPanel &panelInstance, int labelWidth){
	setTextLabelWidth(panelInstance, labelWidth);
}


/**
 * ラベル部分の幅を設定します。
 *
 * @param panelInstance 取得対象のテキストフィールドパネル
 * @param labelWidth ラベル部分の幅
 */
public void setTextLabelWidth(TextFieldPanel &panelInstance, int labelWidth){
	int panelSize[] = getComponentSize(panelInstance.panel);
	int panelWidth = panelSize[0];
	int panelHeight = panelSize[1];

	setComponentSize(panelInstance.textLabelGridPanel, labelWidth, panelHeight);
	setComponentSize(panelInstance.textFieldGridPanel, panelWidth-labelWidth, panelHeight);

	setComponentLocation(panelInstance.textFieldGridPanel, labelWidth, 0);
}


/**
 * パネルのコンポーネントIDを返します。
 *
 * @param panelInstance 取得対象のテキストフィールドパネル
 * @return パネルのGUIコンポーネントID
 */
public int getPanel(TextFieldPanel &panelInstance){
	return panelInstance.panel;
}


/**
 * 指定されたラベルに対応するテキストフィールドを取得します。
 *
 * @param panelInstance 対象のテキストフィールドパネル
 * @param labelText 取得対象のテキストフィールドに対応するラベル文字列
 * @return テキストフィールドのGUIコンポーネントID
 */
public int getTextField(TextFieldPanel &panelInstance, string labelText){
	int index = labelIndexOf(panelInstance, labelText);
	if(index < 0){
		error(ERROR_LABEL_NOT_FOUND + labelText);
	}
	return panelInstance.textField[index];
}


/**
 * 指定されたインデックスのテキストフィールドを取得します。
 *
 * @param panelInstance 対象のテキストフィールドパネル
 * @param index テキストフィールドのインデックス
 * @return テキストフィールドのGUIコンポーネントID
 */
public int getTextField(TextFieldPanel &panelInstance, int index){
	return panelInstance.textField[index];
}


/*
 * 指定されたインデックスのテキストフィールドに、テキストを設定します。
 *
 * @param panelInstance 設定対象のテキストフィールドパネル
 * @param index テキストフィールドのインデックス
 * @param text 設定するテキスト
 */
/*
public void setComponentString(TextFieldPanel &panelInstance, int index, string text){
	setComponentString(panelInstance.textField[index], text);
}
*/


/*
 * 指定されたインデックスのテキストフィールドから、テキストを取得します。
 *
 * @param panelInstance 取得対象のテキストフィールドパネル
 * @param index テキストフィールドのインデックス
 * @return テキストフィールドの保持するテキスト
 */
/*
public string getComponentString(TextFieldPanel &panelInstance, int index){
	return getComponentString(panelInstance.textField[index]);
}
*/


/*
 * 指定されたラベルに対応するテキストフィールドに、テキストを設定します。
 *
 * @param panelInstance 設定対象のテキストフィールドパネル
 * @param labelText 設定対象のテキストフィールドに対応するラベル文字列
 * @param text 設定するテキスト
 */
/*
public void setComponentString(TextFieldPanel &panelInstance, string labelText, string text){
	int index = labelIndexOf(panelInstance, labelText);
	if(index < 0){
		error(ERROR_LABEL_NOT_FOUND + labelText);
	}
	setComponentString(panelInstance.textField[index], text);
}
*/


/*
 * 指定されたラベルに対応するテキストフィールドから、テキストを取得します。
 *
 * @param panelInstance 設定対象のテキストフィールドパネル
 * @param labelText 設定対象のテキストフィールドに対応するラベル文字列
 * @return テキストフィールドの保持するテキスト
 */
/*
public string getComponentString(TextFieldPanel &panelInstance, string labelText){
	int index = labelIndexOf(panelInstance, labelText);
	if(index < 0){
		error(ERROR_LABEL_NOT_FOUND + labelText);
	}
	return getComponentString(panelInstance.textField[index]);
}
*/


/**
 * ラベル文字列に対応する、テキストフィールドのインデックスを返します。
 *
 * @param panelInstance 取得対象のテキストフィールドパネル
 * @param labelText 検索するラベル文字列
 * @return テキストフィールドのインデックス
 */
private int labelIndexOf(TextFieldPanel &panelInstance, string labelText){
	int n = length(panelInstance.textLabelString, 0);
	for(int i=0; i<n; i++){
		if(panelInstance.textLabelString[i] == labelText){
			return i;
		}
	}
	return -1;
}


/**
 * パネルのサイズを返します。
 *
 * @param panelInstance 対象のテキストフィールドパネル
 * @return パネルのサイズを格納する配列
 */
public int[] getComponentSize(TextFieldPanel &panelInstance){
	return getComponentSize(panelInstance.panel);
}


/**
 * パネルのサイズを設定します。
 *
 * @param panelInstance 対象のテキストフィールドパネル
 * @param width パネルの幅
 * @param height パネルの高さ
 */
public void setComponentSize(TextFieldPanel &panelInstance, int width, int height){
	setComponentSize(panelInstance.panel, width, height);
	setComponentSize(panelInstance);
}


/**
 * パネルの現在のサイズに合わせて、内部コンポーネントのサイズを自動設定します。パネルのサイズを外部から変更した際に使用します。
 *
 * @param panelInstance 対象のテキストフィールドパネル
 */
public void setComponentSize(TextFieldPanel &panelInstance){
	int panelSize[] = getComponentSize(panelInstance.panel);
	setComponentSize(panelInstance.textLabelGridPanel, panelSize[0]/2, panelSize[1]);
	setComponentSize(panelInstance.textFieldGridPanel, panelSize[0]/2, panelSize[1]);
	setComponentLocation(panelInstance.textFieldGridPanel, panelSize[0]/2, 0);
}


/**
 * パネルの位置を返します。
 *
 * @param panelInstance 対象のテキストフィールドパネル
 * @return パネルの位置を格納する配列
 */
public int[] getComponentLocation(TextFieldPanel &panelInstance){
	return getComponentLocation(panelInstance.panel);
}


/**
 * パネルの位置を設定します。
 *
 * @param panelInstance 対象のスライダーパネル
 * @param x ウィンドウのX座標
 * @param y ウィンドウのY座標
 */
public void setComponentLocation(TextFieldPanel &panelInstance, int x, int y){
	setComponentLocation(panelInstance.panel, x, y);
}


