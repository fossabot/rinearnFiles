coding UTF-8;

# PRAGMA COMPILE    REFERRAL
# PRAGMA RESERVE    ALL
# 
# PRAGMA INTERNAL   RINEARN  {
#     
#     MAINSTREAM    { "R4***",    "OR_LATER" }
#     COMPATIBLE    { "R3***",    "R2***"    }
#     
#     SYSTEMCALL    { "SYSTEM_PROCESS_DRIVER_NATIVE_*" }
#     INTERFACE     { "GPCI",     "DPCI" }
#     
#     CONNECT       { "ONLOAD",   "STATIC",   "rxvesapi.process.driver.NativeProcessDriver"   }
#     ARCHIVE       { "ONBUILD",  "STATIC",   "rxvesapi.process.library.NativeProcessLibrary" }
#     
# }
# 
# PRAGMA INTERNAL   END
# PRAGMA END

/**
 * <p>
 * VCSSL Process ライブラリ は、オペレーティングシステムと通信し、プロセスを起動・制御するための標準ライブラリです。
 * 起動したプロセスと、標準入出力でやり取りする事も可能です。
 * </p>
 * 
 * <p>
 * Process ライブラリは、VCSSLからオペレーティングシステムのコマンドを実行したり、
 * 別のアプリケーションを起動したりといった機能を提供します。
 * また、VCSSL のプログラムと、
 * VCSSL 以外の言語で開発されたプログラムを連携させる（他言語連携）場合においても必要となります。
 * </p>
 * 
 * <p>
 * VCSSL におけるプロセス制御の基本的な流れは、以下の通りです。
 * </p>
 * 
 * <p>
 * まず、<a href="#newProcess">newProcess</a> 関数でプロセスを生成します。
 * この時点では、まだ実行は開始されません。この関数は、プロセスに固有のID（プロセスID）を割り振って返します
 * （ ここでのプロセスIDは、VCSSL処理系によって割り振られるIDであり、
 * オペレーティングシステムによって割り振られるIDとは一般に一致しません ）。
 * </p>
 * 
 * <p>
 * 続いて、<a href="#startProcess">startProcess</a> 関数でプロセスの実行を開始します。
 * プロセスの実行は、VCSSLプログラムの実行とは非同期で行われます。
 * つまり、プロセスの再生終了を待つことなく、VCSSL の処理も引き続き実行されていきます。
 * もしも、プロセスの終了までVCSSL側の処理を待機させたい場合は、
 * <a href="#waitForProcess">waitForProcess</a> 関数を使用してください。
 * </p>
 * 
 * <p>
 * プロセスの再生が終了すると、<a href="#onProcessEnd">onProcessEnd</a> イベントハンドラがコールされます。
 * ここでプロセスの破棄などを行います。
 * </p>
 * 
 * <p>
 * プロセスの標準出力を取得するには、二通りの方法があります。
 * 一つは、<a href="#getProcessOutput">setProcessOutput</a> 関数を呼び出し、任意のタイミングで能動的に取得する方法です。
 * これは、プロセスの終了後に、標準出力内容を一括して取得したい場合などに便利です。
 * もう一つは、<a href="#onProcessOutput">onProcessOutput</a>イベントハンドラを用いて受動的に取得する方法です。
 * こちらは、受け取った標準出力内容に応じて、標準入力にレスポンスを返したいような場合に便利です。
 * ただしこの場合、標準出力内容が（恐らく行単位で）バッファされ、
 * イベントハンドラに渡されるまでにタイムラグが生じる事に注意してください（特に、改行が行われないままプロセスが入力待ちとなるような場合には注意が必要です）。
 * このタイムラグが問題になるようなやり取りを行うには、必要に応じてループなどから
 * <a href="#flushProcessOutput">flushProcessOutput</a> 関数をコールし、
 * 適時バッファをフラッシュするなどしてください。
 * </p>
 * 
 * @author  松井文宏 - Fumihiro Matsui ( RINEARN )
 * @license Public domain ( CC0 )
 */





/**
 * ネイティブアプリケーションのプロセスを生成し、それに固有の識別番号である「プロセスID」を割り振って返します。
 * <br />
 * この関数によるプロセスの生成後、<a href="#startProcess">startProcess</a> をコールするまで実行は開始されないため（ VCSSL 3.3以降 ）、その間に標準入力内容の設定などを行う事ができます。
 * プロセスの生成は <a href="System.html#exec">System.exec</a> でも可能ですが、exec はプロセス生成と同時に実行開始も行います。
 * <br />
 * 例として、「test.exe」にコマンドライン引数「1」「2」「3」を指定して起動するには、File ライブラリと Process ライブラリを import した上で：
 * <br />
 * string command[] = { getFilePath("test.exe"), "1", "2", "3" }
 * <br />
 * int processID = newProcess(command);
 * <br />
 * などとします。実行を開始するには、続けて：
 * <br />
 * <a href="#startProcess">startProcess</a>(processID);
 * <br />
 * とします。終了まで待機するには、続けて：
 * <br />
 * <a href="#waitForProcess">waitForProcess</a>(processID);
 * <br />
 * とします。
 *
 * @param command[] オペレーティングシステムに渡すコマンド。一般的な環境では [0] にアプリケーションの絶対パス、[1] 以降に起動時のコマンドライン引数を指定します。なお、絶対パスは <a href="File.html#getFilePath">File.getFilePath</a> で取得できます。
 * @return 生成したプロセスに割り振られたプロセスID（識別番号）。
 */
int newProcess( string command[] ){
  return SYSTEM_PROCESS_DRIVER_NATIVE_createProcess( command );
}


/**
 * ネイティブアプリケーションのプロセスを生成し、それに固有の識別番号である「プロセスID」を割り振って返します。
 * <br />
 * この関数によるプロセスの生成後、<a href="#startProcess">startProcess</a> をコールするまで実行は開始されないため（ VCSSL 3.3以降 ）、その間に標準入力内容の設定などを行う事ができます。
 * プロセスの生成は <a href="System.html#exec">System.exec</a> でも可能ですが、exec はプロセス生成と同時に実行開始も行います。
 *
 * @param command オペレーティングシステムに渡すコマンド。コマンド入力端末に入力するように、1行にまとめて指定します。ただし環境によっては使用できない場合があります。
 * @return 生成したプロセスに割り振られたプロセスID（識別番号）。
 */
int newProcess( string command ){
  return SYSTEM_PROCESS_DRIVER_NATIVE_createProcess( command );
}


/**
 * ネイティブアプリケーションのプロセスを実行開始します。
 * <br />
 * 実行開始後は、VCSSLの実行とは独立に、非同期に処理が行われます。
 * プロセスの実行完了まで、VCSSL側の処理を待機させたい場合は、
 * <a href="#waitForProcess">waitForProcess</a> をコールしてください。
 *
 * @param processID 対象プロセスのプロセスID。
 */
void startProcess( int processID ){
  SYSTEM_PROCESS_DRIVER_NATIVE_startProcess( processID );
}


/**
 * ネイティブアプリケーションのプロセスに関するリソースを破棄します。プロセスの実行終了後にコールしてください。
 * <br />
 * ただし、プロセスの実行途中でコールしてはいけません。プロセスを実行途中で破棄するには
 * 先に <a href="#destroyProcess">destroyProcess</a> で強制終了させてください。
 *
 * @param processID 対象プロセスのプロセスID。
 */
void deleteProcess( int processID ){
  SYSTEM_PROCESS_DRIVER_NATIVE_disposeProcess( processID );
}


/**
 * ネイティブアプリケーションのプロセスを、実行途中で強制終了します。
 *
 * @param processID 対象プロセスのプロセスID。
 */
void destroyProcess( int processID ){
  SYSTEM_PROCESS_DRIVER_NATIVE_destroyProcess( processID );
}


/**
 * プロセスに渡す標準入力内容を設定します。
 * <br />
 * 入力内容はバッファされ、プロセスが実際に入力待ちの状態になったタイミングで、プロセスに渡されます。
 * そのためプロセスの終了までに必要な標準入力内容を、改行コード区切りで全てまとめて設定しておく事もできます。
 * <br />
 * 例として、順に「1」,「2」,「3」と入力する場合には：
 * <br />
 * setProcessInput(processID, "1" + EOL + "2" + EOL + "3" + EOL);
 * <br />
 * などとします。
 * <br />
 * なお、バッファに頼らず、標準出力内容の取得と合わせて、対話的に（逐次的に）標準入力を行っていく事もできます。
 * その際、環境にもよりますが、入力内容の末尾には改行コードを付けておかないと、受理されない場合があります。
 *
 * @param processID 対象プロセスのプロセスID。
 */
void setProcessInput( int processID, string command ){
  SYSTEM_PROCESS_DRIVER_NATIVE_setProcessInput( processID, command );
}


/**
 * コールされた時点までにバッファされている、プロセスの標準出力内容を取得します。
 * <br />
 * 環境によっては、バッファ量に上限があったり、バッファ量が蓄積すると効率が低下する事があります。
 * そのため、標準出力内容が多いネイティブアプリケーションについては、
 * <a href="#clearProcessOutput">clearProcessOutput</a> で適時バッファをクリアしてください。
 *
 * @param processID 対象プロセスのプロセスID。
 * @return プロセスのバッファされている標準出力内容。
 */
string getProcessOutput( int processID ){
  return SYSTEM_PROCESS_DRIVER_NATIVE_getProcessOutput( processID );
}


/**
 * コールされた時点までにバッファされている、プロセスの標準エラー出力内容を取得します。
 * <br />
 * 環境によっては、バッファ量に上限があったり、バッファ量が蓄積すると効率が低下する事があります。
 * そのため、標準エラー出力内容が多いネイティブアプリケーションについては、
 * <a href="#clearProcessError">clearProcessError</a> で適時バッファをクリアしてください。
 *
 * @param processID 対象プロセスのプロセスID。
 * @return プロセスのバッファされている標準エラー出力内容。
 */
string getProcessError( int processID ){
  return SYSTEM_PROCESS_DRIVER_NATIVE_getProcessError( processID );
}


/**
 * プロセスの標準出力バッファをクリアします。
 * 標準出力内容が多いネイティブアプリケーションについては、
 * バッファ量が蓄積してくると効率が低下するため、適時クリアしてください。
 *
 * @param processID 対象プロセスのプロセスID。
 */
void clearProcessOutput( int processID ){
  SYSTEM_PROCESS_DRIVER_NATIVE_clearProcessOutput( processID );
}


/**
 * プロセスの標準エラー出力バッファをクリアします。
 * 標準出力内容が多いネイティブアプリケーションについては、
 * バッファ量が蓄積してくると効率が低下するため、適時クリアしてください。
 *
 * @param processID 対象プロセスのプロセスID。
 */
void clearProcessError( int processID ){
  SYSTEM_PROCESS_DRIVER_NATIVE_clearProcessError( processID );
}


/**
 * プロセスの標準出力バッファをフラッシュします。
 * フラッシュを行うと、その時点でバッファされている内容が全て
 * onProcessOutput に流されます。
 *
 * @param processID 対象プロセスのプロセスID。
 */
void flushProcessOutput( int processID ){
  SYSTEM_PROCESS_DRIVER_NATIVE_flushProcessOutput( processID );
}


/**
 * プロセスの標準エラー出力バッファをフラッシュします。
 * フラッシュを行うと、その時点でバッファされている内容が全て
 * onProcessError に流されます。
 *
 * @param processID 対象プロセスのプロセスID。
 */
void flushProcessError( int processID ){
  SYSTEM_PROCESS_DRIVER_NATIVE_flushProcessError( processID );
}


/**
 * プロセスの終了ステータスコードを返します。
 *
 * @param processID 対象プロセスのプロセスID。
 * @return プロセスの終了ステータスコード。
 */
int getProcessExitValue( int processID ){
  SYSTEM_PROCESS_DRIVER_NATIVE_getProcessExitValue( processID );
}


/**
 * プロセスの実行が終了するまで、VCSSL側の実行を待機します。
 *
 * @param processID 対象プロセスのプロセスID。
 */
void waitForProcess( int processID ){
  SYSTEM_PROCESS_DRIVER_NATIVE_waitForProcess( processID );
}


