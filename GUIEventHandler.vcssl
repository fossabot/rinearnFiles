coding UTF-8;


/**
 * ウィンドウが開いた際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 */
void onWindowOpen( int componentID ) {
}

/**
 * ウィンドウが閉じられた際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 */
void onWindowClose( int componentID ) {
}

/**
 * ウィンドウが動かされた際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param x ウィンドウ左端頂点のX座標
 * @param y ウィンドウ左端頂点のY座標
 */
void onWindowMove( int componentID, int x, int y ) {
}


/**
 * ウィンドウがリサイズされた際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param x ウィンドウ左端頂点のX座標
 * @param y ウィンドウ左端頂点のY座標
 */
void onWindowResize( int componentID, int width, int height ) {
}

/**
 * ウィンドウが可視化された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 */
void onWindowShow( int componentID ) {
}

/**
 * ウィンドウが不可視化された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 */
void onWindowHide( int componentID ) {
}

/**
 * ボタンが押された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param text ボタンに表示されているテキスト
 */
void onButtonClick( int componentID, string text ) {
}

/**
 * セレクトフィールドの項目が選択された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param text 選択された項目のテキスト
 */
void onSelectFieldClick( int componentID, string text ) {
}

/**
 * チェックボックスの項目が選択または解除された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param vakue 選択された場合はtrue、解除された場合はfalse
 */
void onCheckBoxClick( int componentID, bool value ) {
}

/**
 * int値のスライダーが操作された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param value スライダーの値
 */
void onSliderMove( int componentID, int value ) {
}

/**
 * float値のスライダーが操作された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param value スライダーの値
 */
void onSliderMove( int componentID, float value ) {
}

/**
 * キーボードのキーが押された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param keyLabel キーのラベル文字列
 */
void onKeyDown( int componentID, string keyLabel ) {
}

/**
 * キーボードのキーが押された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param keyConstant キーを区別する定数（ <a href="#KEY_A">KEY_A</a> など ）
 */
void onKeyDown( int componentID, string keyConstant ) {
}

/**
 * キーボードのキーが離された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param keyLabel キーのラベル文字列
 */
void onKeyUp( int componentID, string keyLabel ) {
}

/**
 * キーボードのキーが離された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param keyConstant キーを区別する定数（ <a href="#KEY_A">KEY_A</a> など ）
 */
void onKeyUp( int componentID, string keyConstant ) {
}

/**
 * マウスのボタンが押された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param x マウスのX座標
 * @param y マウスのX座標
 * @param button マウスのボタンを区別する定数（ <a href="#MOUSE_RIGHT">MOUSE_RIGHT</a> または <a href="#MOUSE_LEFT">MOUSE_LEFT</a> もしくは <a href="#MOUSE_RIGHT">MOUSE_MIDDLE</a> ）
 */
void onMouseDown( int componentID, int x, int y, int button ) {
}

/**
 * マウスのボタンが離された際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param x マウスのX座標
 * @param y マウスのX座標
 * @param button マウスのボタンを区別する定数（ <a href="#MOUSE_RIGHT">MOUSE_RIGHT</a> または <a href="#MOUSE_LEFT">MOUSE_LEFT</a> もしくは <a href="#MOUSE_RIGHT">MOUSE_MIDDLE</a> ）
 */
void onMouseUp( int componentID, int x, int y, int button ) {
}

/**
 * マウスがクリックされた際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param x マウスのX座標
 * @param y マウスのX座標
 * @param button マウスのボタンを区別する定数（ <a href="#MOUSE_RIGHT">MOUSE_RIGHT</a> または <a href="#MOUSE_LEFT">MOUSE_LEFT</a> もしくは <a href="#MOUSE_RIGHT">MOUSE_MIDDLE</a> ）
 * @param count クリック数（ シングルクリックなら 1、ダブルクリックなら 2 ）
 */
void onMouseClick( int componentID, int x, int y, int button, int count ) {
}

/**
 * マウスがドラッグされた際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param x マウスのX座標
 * @param y マウスのX座標
 * @param button マウスのボタンを区別する定数（ <a href="#MOUSE_RIGHT">MOUSE_RIGHT</a> または <a href="#MOUSE_LEFT">MOUSE_LEFT</a> もしくは <a href="#MOUSE_RIGHT">MOUSE_MIDDLE</a> ）
 */
void onMouseClick( int componentID, int x, int y, int button, int count ) {
}

/**
 * マウスホイールがスクロールされた際にコールされます。
 * 
 * @param componentID イベント発生元コンポーネントのID
 * @param degree スクロール数
 */
void onMouseScroll( int componentID, int degree ) {
}



