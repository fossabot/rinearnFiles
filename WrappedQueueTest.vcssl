coding UTF-8;


import "./WrappedQueue.vcssl";


/**
 * <p>data.WrappedQueue モジュールのテストです。</p>
 */


/** テストで要素として使用するint配列です。*/
private const int[] A = {1, 2, 3};

/** テストで要素として使用するint配列です。*/
private const int[] B = {4, 5, 6, 7};

/** テストで要素として使用するint配列です。*/
private const int[] C = {8, 9, 10, 11, 12};


test();


private void test(){
	testClear();
	testSize();
	testEnqueue();
	testDequeue();
	testPeek();
	testContains();
	testReverse();
	testToDataWrapperArray();

	println("data.WrappedQueueTest: OK.");
}


private bool isEquivalentArray(bool[] b){
	int n = length(b, 0);
	for(int i=0; i<n; i++){
		if(!b[i]){
			return false;
		}
	}
	return true;
}


private void testClear(){
	WrappedQueue<int[]> queue;
	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	assert(size<int[]>(queue) == 2);
	clear<int[]>(queue);
	assert(size<int[]>(queue) == 0);
	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	enqueue<int[]>(queue, C);
	assert(size<int[]>(queue) == 3);
	assert(isEquivalentArray( dequeue<int[]>(queue) == A ));
}


private void testSize(){
	WrappedQueue<int[]> queue;
	assert(size<int[]>(queue) == 0);
	enqueue<int[]>(queue, A);
	assert(size<int[]>(queue) == 1);
	enqueue<int[]>(queue, B);
	assert(size<int[]>(queue) == 2);
	enqueue<int[]>(queue, C);
	assert(size<int[]>(queue) == 3);
}


private void testEnqueue(){
	WrappedQueue<int[]> queue;
	assert(size<int[]>(queue) == 0);

	enqueue<int[]>(queue, A);
	assert(size<int[]>(queue) == 1);
	assert(isEquivalentArray(peek<int[]>(queue) == A));

	enqueue<int[]>(queue, B);
	assert(size<int[]>(queue) == 2);
	assert(isEquivalentArray(peek<int[]>(queue) == A));

	enqueue<int[]>(queue, C);
	assert(size<int[]>(queue) == 3);
	assert(isEquivalentArray(peek<int[]>(queue) == A));

	dequeue<int[]>(queue);

	enqueue<int[]>(queue, A);
	assert(size<int[]>(queue) == 3);
	assert(isEquivalentArray(peek<int[]>(queue) == B));

	enqueue<int[]>(queue, B);
	assert(size<int[]>(queue) == 4);
	assert(isEquivalentArray(peek<int[]>(queue) == B));

	enqueue<int[]>(queue, C);
	assert(size<int[]>(queue) == 5);
	assert(isEquivalentArray(peek<int[]>(queue) == B));

	dequeue<int[]>(queue);

	enqueue<int[]>(queue, A);
	assert(size<int[]>(queue) == 5);
	assert(isEquivalentArray(peek<int[]>(queue) == C));

	enqueue<int[]>(queue, B);
	assert(size<int[]>(queue) == 6);
	assert(isEquivalentArray(peek<int[]>(queue) == C));

	enqueue<int[]>(queue, C);
	assert(size<int[]>(queue) == 7);
	assert(isEquivalentArray(peek<int[]>(queue) == C));
}


private void testDequeue(){
	WrappedQueue<int[]> queue;

	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	enqueue<int[]>(queue, C);
	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	enqueue<int[]>(queue, C);
	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	enqueue<int[]>(queue, C);

	assert(size<int[]>(queue) == 9);
	assert(isEquivalentArray(dequeue<int[]>(queue) == A));

	assert(size<int[]>(queue) == 8);
	assert(isEquivalentArray(dequeue<int[]>(queue) == B));

	assert(size<int[]>(queue) == 7);
	assert(isEquivalentArray(dequeue<int[]>(queue) == C));

	assert(size<int[]>(queue) == 6);
	assert(isEquivalentArray(dequeue<int[]>(queue) == A));

	assert(size<int[]>(queue) == 5);
	assert(isEquivalentArray(dequeue<int[]>(queue) == B));

	assert(size<int[]>(queue) == 4);
	assert(isEquivalentArray(dequeue<int[]>(queue) == C));

	assert(size<int[]>(queue) == 3);
	assert(isEquivalentArray(dequeue<int[]>(queue) == A));

	assert(size<int[]>(queue) == 2);
	assert(isEquivalentArray(dequeue<int[]>(queue) == B));

	assert(size<int[]>(queue) == 1);
	assert(isEquivalentArray(dequeue<int[]>(queue) == C));

	assert(size<int[]>(queue) == 0);
}


private void testPeek(){
	WrappedQueue<int[]> queue;

	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	enqueue<int[]>(queue, C);
	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	enqueue<int[]>(queue, C);
	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	enqueue<int[]>(queue, C);

	assert(size<int[]>(queue) == 9);
	assert(isEquivalentArray(peek<int[]>(queue) == A));

	assert(size<int[]>(queue) == 9);
	assert(isEquivalentArray(peek<int[]>(queue) == A));

	assert(size<int[]>(queue) == 9);
	assert(isEquivalentArray(peek<int[]>(queue) == A));

	assert(isEquivalentArray(dequeue<int[]>(queue) == A));

	assert(size<int[]>(queue) == 8);
	assert(isEquivalentArray(peek<int[]>(queue) == B));

	assert(size<int[]>(queue) == 8);
	assert(isEquivalentArray(peek<int[]>(queue) == B));

	assert(size<int[]>(queue) == 8);
	assert(isEquivalentArray(peek<int[]>(queue) == B));

	assert(isEquivalentArray(dequeue<int[]>(queue) == B));

	assert(size<int[]>(queue) == 7);
	assert(isEquivalentArray(peek<int[]>(queue) == C));

	assert(size<int[]>(queue) == 7);
	assert(isEquivalentArray(peek<int[]>(queue) == C));

	assert(size<int[]>(queue) == 7);
	assert(isEquivalentArray(peek<int[]>(queue) == C));

	assert(isEquivalentArray(dequeue<int[]>(queue) == C));
}


private void testContains(){
	WrappedQueue<int[]> queue;

	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);

	assert(contains<int[]>(queue, A));
	assert(contains<int[]>(queue, B));
	assert(!(contains<int[]>(queue, C)));
}


private void testReverse(){
	WrappedQueue<int[]> queue;

	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	enqueue<int[]>(queue, C);
	enqueue<int[]>(queue, C);
	enqueue<int[]>(queue, C);
	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	enqueue<int[]>(queue, C);
	enqueue<int[]>(queue, C);

	reverse<int[]>(queue);

	assert(isEquivalentArray(dequeue<int[]>(queue) == C));
	assert(isEquivalentArray(dequeue<int[]>(queue) == C));
	assert(isEquivalentArray(dequeue<int[]>(queue) == B));
	assert(isEquivalentArray(dequeue<int[]>(queue) == A));
	assert(isEquivalentArray(dequeue<int[]>(queue) == C));
	assert(isEquivalentArray(dequeue<int[]>(queue) == C));
	assert(isEquivalentArray(dequeue<int[]>(queue) == C));
	assert(isEquivalentArray(dequeue<int[]>(queue) == B));
	assert(isEquivalentArray(dequeue<int[]>(queue) == A));
}


private void testToDataWrapperArray(){
	WrappedQueue<int[]> queue;
	enqueue<int[]>(queue, A);
	enqueue<int[]>(queue, B);
	enqueue<int[]>(queue, C);
	DataWrapper<int[]>[] w = toDataWrapperArray<int[]>(queue);
	assert(isEquivalentArray( unwrap<int[]>(w[0]) == A ));
	assert(isEquivalentArray( unwrap<int[]>(w[1]) == B ));
	assert(isEquivalentArray( unwrap<int[]>(w[2]) == C ));
}


